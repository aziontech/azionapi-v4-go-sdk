/*
iam-api

REST API OpenAPI documentation for the iam-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the ResponseBadRequestTOTPDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestTOTPDevice{}

// ResponseBadRequestTOTPDevice struct for ResponseBadRequestTOTPDevice
type ResponseBadRequestTOTPDevice struct {
	Url []string `json:"url,omitempty"`
	Detail *string `json:"detail,omitempty"`
}

// NewResponseBadRequestTOTPDevice instantiates a new ResponseBadRequestTOTPDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestTOTPDevice() *ResponseBadRequestTOTPDevice {
	this := ResponseBadRequestTOTPDevice{}
	return &this
}

// NewResponseBadRequestTOTPDeviceWithDefaults instantiates a new ResponseBadRequestTOTPDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestTOTPDeviceWithDefaults() *ResponseBadRequestTOTPDevice {
	this := ResponseBadRequestTOTPDevice{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ResponseBadRequestTOTPDevice) GetUrl() []string {
	if o == nil || IsNil(o.Url) {
		var ret []string
		return ret
	}
	return o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestTOTPDevice) GetUrlOk() ([]string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ResponseBadRequestTOTPDevice) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given []string and assigns it to the Url field.
func (o *ResponseBadRequestTOTPDevice) SetUrl(v []string) {
	o.Url = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ResponseBadRequestTOTPDevice) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestTOTPDevice) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ResponseBadRequestTOTPDevice) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ResponseBadRequestTOTPDevice) SetDetail(v string) {
	o.Detail = &v
}

func (o ResponseBadRequestTOTPDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestTOTPDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableResponseBadRequestTOTPDevice struct {
	value *ResponseBadRequestTOTPDevice
	isSet bool
}

func (v NullableResponseBadRequestTOTPDevice) Get() *ResponseBadRequestTOTPDevice {
	return v.value
}

func (v *NullableResponseBadRequestTOTPDevice) Set(val *ResponseBadRequestTOTPDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestTOTPDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestTOTPDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestTOTPDevice(val *ResponseBadRequestTOTPDevice) *NullableResponseBadRequestTOTPDevice {
	return &NullableResponseBadRequestTOTPDevice{value: val, isSet: true}
}

func (v NullableResponseBadRequestTOTPDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestTOTPDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


