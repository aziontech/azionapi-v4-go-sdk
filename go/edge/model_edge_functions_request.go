/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EdgeFunctionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EdgeFunctionsRequest{}

// EdgeFunctionsRequest struct for EdgeFunctionsRequest
type EdgeFunctionsRequest struct {
	Name string `json:"name" validate:"regexp=.*"`
	// * `javascript` - JavaScript * `lua` - Lua
	Language *string `json:"language,omitempty"`
	Code string `json:"code" validate:"regexp=.*"`
	JsonArgs interface{} `json:"json_args,omitempty"`
	// * `edge_application` - Edge Application * `edge_firewall` - Edge Firewall
	InitiatorType *string `json:"initiator_type,omitempty"`
	Active *bool `json:"active,omitempty"`
}

type _EdgeFunctionsRequest EdgeFunctionsRequest

// NewEdgeFunctionsRequest instantiates a new EdgeFunctionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdgeFunctionsRequest(name string, code string) *EdgeFunctionsRequest {
	this := EdgeFunctionsRequest{}
	this.Name = name
	var language string = "javascript"
	this.Language = &language
	this.Code = code
	var initiatorType string = "edge_application"
	this.InitiatorType = &initiatorType
	var active bool = true
	this.Active = &active
	return &this
}

// NewEdgeFunctionsRequestWithDefaults instantiates a new EdgeFunctionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEdgeFunctionsRequestWithDefaults() *EdgeFunctionsRequest {
	this := EdgeFunctionsRequest{}
	var language string = "javascript"
	this.Language = &language
	var initiatorType string = "edge_application"
	this.InitiatorType = &initiatorType
	var active bool = true
	this.Active = &active
	return &this
}

// GetName returns the Name field value
func (o *EdgeFunctionsRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EdgeFunctionsRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EdgeFunctionsRequest) SetName(v string) {
	o.Name = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *EdgeFunctionsRequest) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionsRequest) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *EdgeFunctionsRequest) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *EdgeFunctionsRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetCode returns the Code field value
func (o *EdgeFunctionsRequest) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *EdgeFunctionsRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *EdgeFunctionsRequest) SetCode(v string) {
	o.Code = v
}

// GetJsonArgs returns the JsonArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EdgeFunctionsRequest) GetJsonArgs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.JsonArgs
}

// GetJsonArgsOk returns a tuple with the JsonArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EdgeFunctionsRequest) GetJsonArgsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.JsonArgs) {
		return nil, false
	}
	return &o.JsonArgs, true
}

// HasJsonArgs returns a boolean if a field has been set.
func (o *EdgeFunctionsRequest) HasJsonArgs() bool {
	if o != nil && !IsNil(o.JsonArgs) {
		return true
	}

	return false
}

// SetJsonArgs gets a reference to the given interface{} and assigns it to the JsonArgs field.
func (o *EdgeFunctionsRequest) SetJsonArgs(v interface{}) {
	o.JsonArgs = v
}

// GetInitiatorType returns the InitiatorType field value if set, zero value otherwise.
func (o *EdgeFunctionsRequest) GetInitiatorType() string {
	if o == nil || IsNil(o.InitiatorType) {
		var ret string
		return ret
	}
	return *o.InitiatorType
}

// GetInitiatorTypeOk returns a tuple with the InitiatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionsRequest) GetInitiatorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorType) {
		return nil, false
	}
	return o.InitiatorType, true
}

// HasInitiatorType returns a boolean if a field has been set.
func (o *EdgeFunctionsRequest) HasInitiatorType() bool {
	if o != nil && !IsNil(o.InitiatorType) {
		return true
	}

	return false
}

// SetInitiatorType gets a reference to the given string and assigns it to the InitiatorType field.
func (o *EdgeFunctionsRequest) SetInitiatorType(v string) {
	o.InitiatorType = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EdgeFunctionsRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EdgeFunctionsRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EdgeFunctionsRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EdgeFunctionsRequest) SetActive(v bool) {
	o.Active = &v
}

func (o EdgeFunctionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EdgeFunctionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	toSerialize["code"] = o.Code
	if o.JsonArgs != nil {
		toSerialize["json_args"] = o.JsonArgs
	}
	if !IsNil(o.InitiatorType) {
		toSerialize["initiator_type"] = o.InitiatorType
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *EdgeFunctionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdgeFunctionsRequest := _EdgeFunctionsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEdgeFunctionsRequest)

	if err != nil {
		return err
	}

	*o = EdgeFunctionsRequest(varEdgeFunctionsRequest)

	return err
}

type NullableEdgeFunctionsRequest struct {
	value *EdgeFunctionsRequest
	isSet bool
}

func (v NullableEdgeFunctionsRequest) Get() *EdgeFunctionsRequest {
	return v.value
}

func (v *NullableEdgeFunctionsRequest) Set(val *EdgeFunctionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeFunctionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeFunctionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeFunctionsRequest(val *EdgeFunctionsRequest) *NullableEdgeFunctionsRequest {
	return &NullableEdgeFunctionsRequest{value: val, isSet: true}
}

func (v NullableEdgeFunctionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeFunctionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


