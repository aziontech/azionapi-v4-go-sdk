/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponsesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponsesRequest{}

// ErrorResponsesRequest struct for ErrorResponsesRequest
type ErrorResponsesRequest struct {
	OriginId NullableInt64 `json:"origin_id,omitempty"`
	ErrorResponses []NestedErrorResponseRequest `json:"error_responses"`
}

type _ErrorResponsesRequest ErrorResponsesRequest

// NewErrorResponsesRequest instantiates a new ErrorResponsesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponsesRequest(errorResponses []NestedErrorResponseRequest) *ErrorResponsesRequest {
	this := ErrorResponsesRequest{}
	this.ErrorResponses = errorResponses
	return &this
}

// NewErrorResponsesRequestWithDefaults instantiates a new ErrorResponsesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponsesRequestWithDefaults() *ErrorResponsesRequest {
	this := ErrorResponsesRequest{}
	return &this
}

// GetOriginId returns the OriginId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorResponsesRequest) GetOriginId() int64 {
	if o == nil || IsNil(o.OriginId.Get()) {
		var ret int64
		return ret
	}
	return *o.OriginId.Get()
}

// GetOriginIdOk returns a tuple with the OriginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorResponsesRequest) GetOriginIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginId.Get(), o.OriginId.IsSet()
}

// HasOriginId returns a boolean if a field has been set.
func (o *ErrorResponsesRequest) HasOriginId() bool {
	if o != nil && o.OriginId.IsSet() {
		return true
	}

	return false
}

// SetOriginId gets a reference to the given NullableInt64 and assigns it to the OriginId field.
func (o *ErrorResponsesRequest) SetOriginId(v int64) {
	o.OriginId.Set(&v)
}
// SetOriginIdNil sets the value for OriginId to be an explicit nil
func (o *ErrorResponsesRequest) SetOriginIdNil() {
	o.OriginId.Set(nil)
}

// UnsetOriginId ensures that no value is present for OriginId, not even an explicit nil
func (o *ErrorResponsesRequest) UnsetOriginId() {
	o.OriginId.Unset()
}

// GetErrorResponses returns the ErrorResponses field value
func (o *ErrorResponsesRequest) GetErrorResponses() []NestedErrorResponseRequest {
	if o == nil {
		var ret []NestedErrorResponseRequest
		return ret
	}

	return o.ErrorResponses
}

// GetErrorResponsesOk returns a tuple with the ErrorResponses field value
// and a boolean to check if the value has been set.
func (o *ErrorResponsesRequest) GetErrorResponsesOk() ([]NestedErrorResponseRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorResponses, true
}

// SetErrorResponses sets field value
func (o *ErrorResponsesRequest) SetErrorResponses(v []NestedErrorResponseRequest) {
	o.ErrorResponses = v
}

func (o ErrorResponsesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponsesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.OriginId.IsSet() {
		toSerialize["origin_id"] = o.OriginId.Get()
	}
	toSerialize["error_responses"] = o.ErrorResponses
	return toSerialize, nil
}

func (o *ErrorResponsesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error_responses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponsesRequest := _ErrorResponsesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponsesRequest)

	if err != nil {
		return err
	}

	*o = ErrorResponsesRequest(varErrorResponsesRequest)

	return err
}

type NullableErrorResponsesRequest struct {
	value *ErrorResponsesRequest
	isSet bool
}

func (v NullableErrorResponsesRequest) Get() *ErrorResponsesRequest {
	return v.value
}

func (v *NullableErrorResponsesRequest) Set(val *ErrorResponsesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponsesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponsesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponsesRequest(val *ErrorResponsesRequest) *NullableErrorResponsesRequest {
	return &NullableErrorResponsesRequest{value: val, isSet: true}
}

func (v NullableErrorResponsesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponsesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


