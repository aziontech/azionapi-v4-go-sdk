/*
Accounts API

REST API OpenAPI documentation for the Accounts API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounts

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ResponseListAccount - struct for ResponseListAccount
type ResponseListAccount struct {
	Brand *Brand
	Organization *Organization
	Reseller *Reseller
	Workspace *Workspace
}

// BrandAsResponseListAccount is a convenience function that returns Brand wrapped in ResponseListAccount
func BrandAsResponseListAccount(v *Brand) ResponseListAccount {
	return ResponseListAccount{
		Brand: v,
	}
}

// OrganizationAsResponseListAccount is a convenience function that returns Organization wrapped in ResponseListAccount
func OrganizationAsResponseListAccount(v *Organization) ResponseListAccount {
	return ResponseListAccount{
		Organization: v,
	}
}

// ResellerAsResponseListAccount is a convenience function that returns Reseller wrapped in ResponseListAccount
func ResellerAsResponseListAccount(v *Reseller) ResponseListAccount {
	return ResponseListAccount{
		Reseller: v,
	}
}

// WorkspaceAsResponseListAccount is a convenience function that returns Workspace wrapped in ResponseListAccount
func WorkspaceAsResponseListAccount(v *Workspace) ResponseListAccount {
	return ResponseListAccount{
		Workspace: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseListAccount) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Brand
	err = newStrictDecoder(data).Decode(&dst.Brand)
	if err == nil {
		jsonBrand, _ := json.Marshal(dst.Brand)
		if string(jsonBrand) == "{}" { // empty struct
			dst.Brand = nil
		} else {
			if err = validator.Validate(dst.Brand); err != nil {
				dst.Brand = nil
			} else {
				match++
			}
		}
	} else {
		dst.Brand = nil
	}

	// try to unmarshal data into Organization
	err = newStrictDecoder(data).Decode(&dst.Organization)
	if err == nil {
		jsonOrganization, _ := json.Marshal(dst.Organization)
		if string(jsonOrganization) == "{}" { // empty struct
			dst.Organization = nil
		} else {
			if err = validator.Validate(dst.Organization); err != nil {
				dst.Organization = nil
			} else {
				match++
			}
		}
	} else {
		dst.Organization = nil
	}

	// try to unmarshal data into Reseller
	err = newStrictDecoder(data).Decode(&dst.Reseller)
	if err == nil {
		jsonReseller, _ := json.Marshal(dst.Reseller)
		if string(jsonReseller) == "{}" { // empty struct
			dst.Reseller = nil
		} else {
			if err = validator.Validate(dst.Reseller); err != nil {
				dst.Reseller = nil
			} else {
				match++
			}
		}
	} else {
		dst.Reseller = nil
	}

	// try to unmarshal data into Workspace
	err = newStrictDecoder(data).Decode(&dst.Workspace)
	if err == nil {
		jsonWorkspace, _ := json.Marshal(dst.Workspace)
		if string(jsonWorkspace) == "{}" { // empty struct
			dst.Workspace = nil
		} else {
			if err = validator.Validate(dst.Workspace); err != nil {
				dst.Workspace = nil
			} else {
				match++
			}
		}
	} else {
		dst.Workspace = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Brand = nil
		dst.Organization = nil
		dst.Reseller = nil
		dst.Workspace = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseListAccount)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseListAccount)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseListAccount) MarshalJSON() ([]byte, error) {
	if src.Brand != nil {
		return json.Marshal(&src.Brand)
	}

	if src.Organization != nil {
		return json.Marshal(&src.Organization)
	}

	if src.Reseller != nil {
		return json.Marshal(&src.Reseller)
	}

	if src.Workspace != nil {
		return json.Marshal(&src.Workspace)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseListAccount) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Brand != nil {
		return obj.Brand
	}

	if obj.Organization != nil {
		return obj.Organization
	}

	if obj.Reseller != nil {
		return obj.Reseller
	}

	if obj.Workspace != nil {
		return obj.Workspace
	}

	// all schemas are nil
	return nil
}

type NullableResponseListAccount struct {
	value *ResponseListAccount
	isSet bool
}

func (v NullableResponseListAccount) Get() *ResponseListAccount {
	return v.value
}

func (v *NullableResponseListAccount) Set(val *ResponseListAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseListAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseListAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseListAccount(val *ResponseListAccount) *NullableResponseListAccount {
	return &NullableResponseListAccount{value: val, isSet: true}
}

func (v NullableResponseListAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseListAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


