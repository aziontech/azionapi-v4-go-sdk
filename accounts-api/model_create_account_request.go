/*
Accounts API

REST API OpenAPI documentation for the Accounts API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounts-api

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateAccountRequest - struct for CreateAccountRequest
type CreateAccountRequest struct {
	CreateBrandRequest *CreateBrandRequest
	CreateOrganizationRequest *CreateOrganizationRequest
	CreateResellerRequest *CreateResellerRequest
	CreateWorkspaceRequest *CreateWorkspaceRequest
}

// CreateBrandRequestAsCreateAccountRequest is a convenience function that returns CreateBrandRequest wrapped in CreateAccountRequest
func CreateBrandRequestAsCreateAccountRequest(v *CreateBrandRequest) CreateAccountRequest {
	return CreateAccountRequest{
		CreateBrandRequest: v,
	}
}

// CreateOrganizationRequestAsCreateAccountRequest is a convenience function that returns CreateOrganizationRequest wrapped in CreateAccountRequest
func CreateOrganizationRequestAsCreateAccountRequest(v *CreateOrganizationRequest) CreateAccountRequest {
	return CreateAccountRequest{
		CreateOrganizationRequest: v,
	}
}

// CreateResellerRequestAsCreateAccountRequest is a convenience function that returns CreateResellerRequest wrapped in CreateAccountRequest
func CreateResellerRequestAsCreateAccountRequest(v *CreateResellerRequest) CreateAccountRequest {
	return CreateAccountRequest{
		CreateResellerRequest: v,
	}
}

// CreateWorkspaceRequestAsCreateAccountRequest is a convenience function that returns CreateWorkspaceRequest wrapped in CreateAccountRequest
func CreateWorkspaceRequestAsCreateAccountRequest(v *CreateWorkspaceRequest) CreateAccountRequest {
	return CreateAccountRequest{
		CreateWorkspaceRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAccountRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateBrandRequest
	err = newStrictDecoder(data).Decode(&dst.CreateBrandRequest)
	if err == nil {
		jsonCreateBrandRequest, _ := json.Marshal(dst.CreateBrandRequest)
		if string(jsonCreateBrandRequest) == "{}" { // empty struct
			dst.CreateBrandRequest = nil
		} else {
			if err = validator.Validate(dst.CreateBrandRequest); err != nil {
				dst.CreateBrandRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateBrandRequest = nil
	}

	// try to unmarshal data into CreateOrganizationRequest
	err = newStrictDecoder(data).Decode(&dst.CreateOrganizationRequest)
	if err == nil {
		jsonCreateOrganizationRequest, _ := json.Marshal(dst.CreateOrganizationRequest)
		if string(jsonCreateOrganizationRequest) == "{}" { // empty struct
			dst.CreateOrganizationRequest = nil
		} else {
			if err = validator.Validate(dst.CreateOrganizationRequest); err != nil {
				dst.CreateOrganizationRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateOrganizationRequest = nil
	}

	// try to unmarshal data into CreateResellerRequest
	err = newStrictDecoder(data).Decode(&dst.CreateResellerRequest)
	if err == nil {
		jsonCreateResellerRequest, _ := json.Marshal(dst.CreateResellerRequest)
		if string(jsonCreateResellerRequest) == "{}" { // empty struct
			dst.CreateResellerRequest = nil
		} else {
			if err = validator.Validate(dst.CreateResellerRequest); err != nil {
				dst.CreateResellerRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateResellerRequest = nil
	}

	// try to unmarshal data into CreateWorkspaceRequest
	err = newStrictDecoder(data).Decode(&dst.CreateWorkspaceRequest)
	if err == nil {
		jsonCreateWorkspaceRequest, _ := json.Marshal(dst.CreateWorkspaceRequest)
		if string(jsonCreateWorkspaceRequest) == "{}" { // empty struct
			dst.CreateWorkspaceRequest = nil
		} else {
			if err = validator.Validate(dst.CreateWorkspaceRequest); err != nil {
				dst.CreateWorkspaceRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateWorkspaceRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateBrandRequest = nil
		dst.CreateOrganizationRequest = nil
		dst.CreateResellerRequest = nil
		dst.CreateWorkspaceRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateAccountRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateAccountRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAccountRequest) MarshalJSON() ([]byte, error) {
	if src.CreateBrandRequest != nil {
		return json.Marshal(&src.CreateBrandRequest)
	}

	if src.CreateOrganizationRequest != nil {
		return json.Marshal(&src.CreateOrganizationRequest)
	}

	if src.CreateResellerRequest != nil {
		return json.Marshal(&src.CreateResellerRequest)
	}

	if src.CreateWorkspaceRequest != nil {
		return json.Marshal(&src.CreateWorkspaceRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAccountRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateBrandRequest != nil {
		return obj.CreateBrandRequest
	}

	if obj.CreateOrganizationRequest != nil {
		return obj.CreateOrganizationRequest
	}

	if obj.CreateResellerRequest != nil {
		return obj.CreateResellerRequest
	}

	if obj.CreateWorkspaceRequest != nil {
		return obj.CreateWorkspaceRequest
	}

	// all schemas are nil
	return nil
}

type NullableCreateAccountRequest struct {
	value *CreateAccountRequest
	isSet bool
}

func (v NullableCreateAccountRequest) Get() *CreateAccountRequest {
	return v.value
}

func (v *NullableCreateAccountRequest) Set(val *CreateAccountRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccountRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccountRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccountRequest(val *CreateAccountRequest) *NullableCreateAccountRequest {
	return &NullableCreateAccountRequest{value: val, isSet: true}
}

func (v NullableCreateAccountRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccountRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


