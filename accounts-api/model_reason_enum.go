/*
Accounts API

REST API OpenAPI documentation for the Accounts API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounts

import (
	"encoding/json"
)

// checks if the ReasonEnum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonEnum{}

// ReasonEnum * `trial` - Trial account status, currently on a trial period. * `online` - Online account status, used for online sales operations. * `regular` - Regular account status, indicates the customer has an active contract. * `overdue` - Overdue status, the account failed necessary payments after retries. * `quarantine` - Quarantine status, the account is suspended due to suspected misuse or security breach. * `violation` - Violation status, temporarily suspended due to administrative, technical, security, or policy violations. * `idle` - Idle status, the account was removed due to inactivity. * `terminated` - Terminated status, the account was shut down by the service provider. * `voluntary` - Voluntary status, the account was canceled by its owner.
type ReasonEnum struct {
}

// NewReasonEnum instantiates a new ReasonEnum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonEnum() *ReasonEnum {
	this := ReasonEnum{}
	return &this
}

// NewReasonEnumWithDefaults instantiates a new ReasonEnum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonEnumWithDefaults() *ReasonEnum {
	this := ReasonEnum{}
	return &this
}

func (o ReasonEnum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonEnum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableReasonEnum struct {
	value ReasonEnum
	isSet bool
}

func (v NullableReasonEnum) Get() ReasonEnum {
	return v.value
}

func (v *NullableReasonEnum) Set(val ReasonEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonEnum) Unset() {
	v.isSet = false
}

func NewNullableReasonEnum(val ReasonEnum) *NullableReasonEnum {
	return &NullableReasonEnum{value: val, isSet: true}
}

func (v NullableReasonEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


