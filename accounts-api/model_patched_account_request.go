/*
Accounts API

REST API OpenAPI documentation for the Accounts API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accounts

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PatchedAccountRequest - struct for PatchedAccountRequest
type PatchedAccountRequest struct {
	PatchedBrandRequest *PatchedBrandRequest
	PatchedOrganizationRequest *PatchedOrganizationRequest
	PatchedResellerRequest *PatchedResellerRequest
	PatchedWorkspaceRequest *PatchedWorkspaceRequest
}

// PatchedBrandRequestAsPatchedAccountRequest is a convenience function that returns PatchedBrandRequest wrapped in PatchedAccountRequest
func PatchedBrandRequestAsPatchedAccountRequest(v *PatchedBrandRequest) PatchedAccountRequest {
	return PatchedAccountRequest{
		PatchedBrandRequest: v,
	}
}

// PatchedOrganizationRequestAsPatchedAccountRequest is a convenience function that returns PatchedOrganizationRequest wrapped in PatchedAccountRequest
func PatchedOrganizationRequestAsPatchedAccountRequest(v *PatchedOrganizationRequest) PatchedAccountRequest {
	return PatchedAccountRequest{
		PatchedOrganizationRequest: v,
	}
}

// PatchedResellerRequestAsPatchedAccountRequest is a convenience function that returns PatchedResellerRequest wrapped in PatchedAccountRequest
func PatchedResellerRequestAsPatchedAccountRequest(v *PatchedResellerRequest) PatchedAccountRequest {
	return PatchedAccountRequest{
		PatchedResellerRequest: v,
	}
}

// PatchedWorkspaceRequestAsPatchedAccountRequest is a convenience function that returns PatchedWorkspaceRequest wrapped in PatchedAccountRequest
func PatchedWorkspaceRequestAsPatchedAccountRequest(v *PatchedWorkspaceRequest) PatchedAccountRequest {
	return PatchedAccountRequest{
		PatchedWorkspaceRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchedAccountRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PatchedBrandRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedBrandRequest)
	if err == nil {
		jsonPatchedBrandRequest, _ := json.Marshal(dst.PatchedBrandRequest)
		if string(jsonPatchedBrandRequest) == "{}" { // empty struct
			dst.PatchedBrandRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedBrandRequest); err != nil {
				dst.PatchedBrandRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedBrandRequest = nil
	}

	// try to unmarshal data into PatchedOrganizationRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedOrganizationRequest)
	if err == nil {
		jsonPatchedOrganizationRequest, _ := json.Marshal(dst.PatchedOrganizationRequest)
		if string(jsonPatchedOrganizationRequest) == "{}" { // empty struct
			dst.PatchedOrganizationRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedOrganizationRequest); err != nil {
				dst.PatchedOrganizationRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedOrganizationRequest = nil
	}

	// try to unmarshal data into PatchedResellerRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedResellerRequest)
	if err == nil {
		jsonPatchedResellerRequest, _ := json.Marshal(dst.PatchedResellerRequest)
		if string(jsonPatchedResellerRequest) == "{}" { // empty struct
			dst.PatchedResellerRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedResellerRequest); err != nil {
				dst.PatchedResellerRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedResellerRequest = nil
	}

	// try to unmarshal data into PatchedWorkspaceRequest
	err = newStrictDecoder(data).Decode(&dst.PatchedWorkspaceRequest)
	if err == nil {
		jsonPatchedWorkspaceRequest, _ := json.Marshal(dst.PatchedWorkspaceRequest)
		if string(jsonPatchedWorkspaceRequest) == "{}" { // empty struct
			dst.PatchedWorkspaceRequest = nil
		} else {
			if err = validator.Validate(dst.PatchedWorkspaceRequest); err != nil {
				dst.PatchedWorkspaceRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.PatchedWorkspaceRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PatchedBrandRequest = nil
		dst.PatchedOrganizationRequest = nil
		dst.PatchedResellerRequest = nil
		dst.PatchedWorkspaceRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchedAccountRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchedAccountRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchedAccountRequest) MarshalJSON() ([]byte, error) {
	if src.PatchedBrandRequest != nil {
		return json.Marshal(&src.PatchedBrandRequest)
	}

	if src.PatchedOrganizationRequest != nil {
		return json.Marshal(&src.PatchedOrganizationRequest)
	}

	if src.PatchedResellerRequest != nil {
		return json.Marshal(&src.PatchedResellerRequest)
	}

	if src.PatchedWorkspaceRequest != nil {
		return json.Marshal(&src.PatchedWorkspaceRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchedAccountRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PatchedBrandRequest != nil {
		return obj.PatchedBrandRequest
	}

	if obj.PatchedOrganizationRequest != nil {
		return obj.PatchedOrganizationRequest
	}

	if obj.PatchedResellerRequest != nil {
		return obj.PatchedResellerRequest
	}

	if obj.PatchedWorkspaceRequest != nil {
		return obj.PatchedWorkspaceRequest
	}

	// all schemas are nil
	return nil
}

type NullablePatchedAccountRequest struct {
	value *PatchedAccountRequest
	isSet bool
}

func (v NullablePatchedAccountRequest) Get() *PatchedAccountRequest {
	return v.value
}

func (v *NullablePatchedAccountRequest) Set(val *PatchedAccountRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedAccountRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedAccountRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedAccountRequest(val *PatchedAccountRequest) *NullablePatchedAccountRequest {
	return &NullablePatchedAccountRequest{value: val, isSet: true}
}

func (v NullablePatchedAccountRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedAccountRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


