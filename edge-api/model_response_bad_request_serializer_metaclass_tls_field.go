/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
)

// checks if the ResponseBadRequestSerializerMetaclassTlsField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestSerializerMetaclassTlsField{}

// ResponseBadRequestSerializerMetaclassTlsField struct for ResponseBadRequestSerializerMetaclassTlsField
type ResponseBadRequestSerializerMetaclassTlsField struct {
	Certificate []string `json:"certificate,omitempty"`
	Ciphers []string `json:"ciphers,omitempty"`
	MinimumVersion []string `json:"minimum_version,omitempty"`
}

// NewResponseBadRequestSerializerMetaclassTlsField instantiates a new ResponseBadRequestSerializerMetaclassTlsField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestSerializerMetaclassTlsField() *ResponseBadRequestSerializerMetaclassTlsField {
	this := ResponseBadRequestSerializerMetaclassTlsField{}
	return &this
}

// NewResponseBadRequestSerializerMetaclassTlsFieldWithDefaults instantiates a new ResponseBadRequestSerializerMetaclassTlsField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestSerializerMetaclassTlsFieldWithDefaults() *ResponseBadRequestSerializerMetaclassTlsField {
	this := ResponseBadRequestSerializerMetaclassTlsField{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassTlsField) GetCertificate() []string {
	if o == nil || IsNil(o.Certificate) {
		var ret []string
		return ret
	}
	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassTlsField) GetCertificateOk() ([]string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassTlsField) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given []string and assigns it to the Certificate field.
func (o *ResponseBadRequestSerializerMetaclassTlsField) SetCertificate(v []string) {
	o.Certificate = v
}

// GetCiphers returns the Ciphers field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassTlsField) GetCiphers() []string {
	if o == nil || IsNil(o.Ciphers) {
		var ret []string
		return ret
	}
	return o.Ciphers
}

// GetCiphersOk returns a tuple with the Ciphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassTlsField) GetCiphersOk() ([]string, bool) {
	if o == nil || IsNil(o.Ciphers) {
		return nil, false
	}
	return o.Ciphers, true
}

// HasCiphers returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassTlsField) HasCiphers() bool {
	if o != nil && !IsNil(o.Ciphers) {
		return true
	}

	return false
}

// SetCiphers gets a reference to the given []string and assigns it to the Ciphers field.
func (o *ResponseBadRequestSerializerMetaclassTlsField) SetCiphers(v []string) {
	o.Ciphers = v
}

// GetMinimumVersion returns the MinimumVersion field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassTlsField) GetMinimumVersion() []string {
	if o == nil || IsNil(o.MinimumVersion) {
		var ret []string
		return ret
	}
	return o.MinimumVersion
}

// GetMinimumVersionOk returns a tuple with the MinimumVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassTlsField) GetMinimumVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.MinimumVersion) {
		return nil, false
	}
	return o.MinimumVersion, true
}

// HasMinimumVersion returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassTlsField) HasMinimumVersion() bool {
	if o != nil && !IsNil(o.MinimumVersion) {
		return true
	}

	return false
}

// SetMinimumVersion gets a reference to the given []string and assigns it to the MinimumVersion field.
func (o *ResponseBadRequestSerializerMetaclassTlsField) SetMinimumVersion(v []string) {
	o.MinimumVersion = v
}

func (o ResponseBadRequestSerializerMetaclassTlsField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestSerializerMetaclassTlsField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Ciphers) {
		toSerialize["ciphers"] = o.Ciphers
	}
	if !IsNil(o.MinimumVersion) {
		toSerialize["minimum_version"] = o.MinimumVersion
	}
	return toSerialize, nil
}

type NullableResponseBadRequestSerializerMetaclassTlsField struct {
	value *ResponseBadRequestSerializerMetaclassTlsField
	isSet bool
}

func (v NullableResponseBadRequestSerializerMetaclassTlsField) Get() *ResponseBadRequestSerializerMetaclassTlsField {
	return v.value
}

func (v *NullableResponseBadRequestSerializerMetaclassTlsField) Set(val *ResponseBadRequestSerializerMetaclassTlsField) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestSerializerMetaclassTlsField) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestSerializerMetaclassTlsField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestSerializerMetaclassTlsField(val *ResponseBadRequestSerializerMetaclassTlsField) *NullableResponseBadRequestSerializerMetaclassTlsField {
	return &NullableResponseBadRequestSerializerMetaclassTlsField{value: val, isSet: true}
}

func (v NullableResponseBadRequestSerializerMetaclassTlsField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestSerializerMetaclassTlsField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


