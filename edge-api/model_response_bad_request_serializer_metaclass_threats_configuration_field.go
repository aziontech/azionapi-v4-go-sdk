/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
)

// checks if the ResponseBadRequestSerializerMetaclassThreatsConfigurationField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestSerializerMetaclassThreatsConfigurationField{}

// ResponseBadRequestSerializerMetaclassThreatsConfigurationField struct for ResponseBadRequestSerializerMetaclassThreatsConfigurationField
type ResponseBadRequestSerializerMetaclassThreatsConfigurationField struct {
	CrossSiteScripting []string `json:"cross_site_scripting,omitempty"`
	CrossSiteScriptingSensitivity []string `json:"cross_site_scripting_sensitivity,omitempty"`
	DirectoryTraversal []string `json:"directory_traversal,omitempty"`
	DirectoryTraversalSensitivity []string `json:"directory_traversal_sensitivity,omitempty"`
	EvadingTricks []string `json:"evading_tricks,omitempty"`
	EvadingTricksSensitivity []string `json:"evading_tricks_sensitivity,omitempty"`
	FileUpload []string `json:"file_upload,omitempty"`
	FileUploadSensitivity []string `json:"file_upload_sensitivity,omitempty"`
	IdentifiedAttack []string `json:"identified_attack,omitempty"`
	IdentifiedAttackSensitivity []string `json:"identified_attack_sensitivity,omitempty"`
	RemoteFileInclusion []string `json:"remote_file_inclusion,omitempty"`
	RemoteFileInclusionSensitivity []string `json:"remote_file_inclusion_sensitivity,omitempty"`
	SqlInjection []string `json:"sql_injection,omitempty"`
	SqlInjectionSensitivity []string `json:"sql_injection_sensitivity,omitempty"`
	UnwantedAccess []string `json:"unwanted_access,omitempty"`
	UnwantedAccessSensitivity []string `json:"unwanted_access_sensitivity,omitempty"`
}

// NewResponseBadRequestSerializerMetaclassThreatsConfigurationField instantiates a new ResponseBadRequestSerializerMetaclassThreatsConfigurationField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestSerializerMetaclassThreatsConfigurationField() *ResponseBadRequestSerializerMetaclassThreatsConfigurationField {
	this := ResponseBadRequestSerializerMetaclassThreatsConfigurationField{}
	return &this
}

// NewResponseBadRequestSerializerMetaclassThreatsConfigurationFieldWithDefaults instantiates a new ResponseBadRequestSerializerMetaclassThreatsConfigurationField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestSerializerMetaclassThreatsConfigurationFieldWithDefaults() *ResponseBadRequestSerializerMetaclassThreatsConfigurationField {
	this := ResponseBadRequestSerializerMetaclassThreatsConfigurationField{}
	return &this
}

// GetCrossSiteScripting returns the CrossSiteScripting field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetCrossSiteScripting() []string {
	if o == nil || IsNil(o.CrossSiteScripting) {
		var ret []string
		return ret
	}
	return o.CrossSiteScripting
}

// GetCrossSiteScriptingOk returns a tuple with the CrossSiteScripting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetCrossSiteScriptingOk() ([]string, bool) {
	if o == nil || IsNil(o.CrossSiteScripting) {
		return nil, false
	}
	return o.CrossSiteScripting, true
}

// HasCrossSiteScripting returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasCrossSiteScripting() bool {
	if o != nil && !IsNil(o.CrossSiteScripting) {
		return true
	}

	return false
}

// SetCrossSiteScripting gets a reference to the given []string and assigns it to the CrossSiteScripting field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetCrossSiteScripting(v []string) {
	o.CrossSiteScripting = v
}

// GetCrossSiteScriptingSensitivity returns the CrossSiteScriptingSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetCrossSiteScriptingSensitivity() []string {
	if o == nil || IsNil(o.CrossSiteScriptingSensitivity) {
		var ret []string
		return ret
	}
	return o.CrossSiteScriptingSensitivity
}

// GetCrossSiteScriptingSensitivityOk returns a tuple with the CrossSiteScriptingSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetCrossSiteScriptingSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.CrossSiteScriptingSensitivity) {
		return nil, false
	}
	return o.CrossSiteScriptingSensitivity, true
}

// HasCrossSiteScriptingSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasCrossSiteScriptingSensitivity() bool {
	if o != nil && !IsNil(o.CrossSiteScriptingSensitivity) {
		return true
	}

	return false
}

// SetCrossSiteScriptingSensitivity gets a reference to the given []string and assigns it to the CrossSiteScriptingSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetCrossSiteScriptingSensitivity(v []string) {
	o.CrossSiteScriptingSensitivity = v
}

// GetDirectoryTraversal returns the DirectoryTraversal field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetDirectoryTraversal() []string {
	if o == nil || IsNil(o.DirectoryTraversal) {
		var ret []string
		return ret
	}
	return o.DirectoryTraversal
}

// GetDirectoryTraversalOk returns a tuple with the DirectoryTraversal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetDirectoryTraversalOk() ([]string, bool) {
	if o == nil || IsNil(o.DirectoryTraversal) {
		return nil, false
	}
	return o.DirectoryTraversal, true
}

// HasDirectoryTraversal returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasDirectoryTraversal() bool {
	if o != nil && !IsNil(o.DirectoryTraversal) {
		return true
	}

	return false
}

// SetDirectoryTraversal gets a reference to the given []string and assigns it to the DirectoryTraversal field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetDirectoryTraversal(v []string) {
	o.DirectoryTraversal = v
}

// GetDirectoryTraversalSensitivity returns the DirectoryTraversalSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetDirectoryTraversalSensitivity() []string {
	if o == nil || IsNil(o.DirectoryTraversalSensitivity) {
		var ret []string
		return ret
	}
	return o.DirectoryTraversalSensitivity
}

// GetDirectoryTraversalSensitivityOk returns a tuple with the DirectoryTraversalSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetDirectoryTraversalSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.DirectoryTraversalSensitivity) {
		return nil, false
	}
	return o.DirectoryTraversalSensitivity, true
}

// HasDirectoryTraversalSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasDirectoryTraversalSensitivity() bool {
	if o != nil && !IsNil(o.DirectoryTraversalSensitivity) {
		return true
	}

	return false
}

// SetDirectoryTraversalSensitivity gets a reference to the given []string and assigns it to the DirectoryTraversalSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetDirectoryTraversalSensitivity(v []string) {
	o.DirectoryTraversalSensitivity = v
}

// GetEvadingTricks returns the EvadingTricks field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetEvadingTricks() []string {
	if o == nil || IsNil(o.EvadingTricks) {
		var ret []string
		return ret
	}
	return o.EvadingTricks
}

// GetEvadingTricksOk returns a tuple with the EvadingTricks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetEvadingTricksOk() ([]string, bool) {
	if o == nil || IsNil(o.EvadingTricks) {
		return nil, false
	}
	return o.EvadingTricks, true
}

// HasEvadingTricks returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasEvadingTricks() bool {
	if o != nil && !IsNil(o.EvadingTricks) {
		return true
	}

	return false
}

// SetEvadingTricks gets a reference to the given []string and assigns it to the EvadingTricks field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetEvadingTricks(v []string) {
	o.EvadingTricks = v
}

// GetEvadingTricksSensitivity returns the EvadingTricksSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetEvadingTricksSensitivity() []string {
	if o == nil || IsNil(o.EvadingTricksSensitivity) {
		var ret []string
		return ret
	}
	return o.EvadingTricksSensitivity
}

// GetEvadingTricksSensitivityOk returns a tuple with the EvadingTricksSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetEvadingTricksSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.EvadingTricksSensitivity) {
		return nil, false
	}
	return o.EvadingTricksSensitivity, true
}

// HasEvadingTricksSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasEvadingTricksSensitivity() bool {
	if o != nil && !IsNil(o.EvadingTricksSensitivity) {
		return true
	}

	return false
}

// SetEvadingTricksSensitivity gets a reference to the given []string and assigns it to the EvadingTricksSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetEvadingTricksSensitivity(v []string) {
	o.EvadingTricksSensitivity = v
}

// GetFileUpload returns the FileUpload field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetFileUpload() []string {
	if o == nil || IsNil(o.FileUpload) {
		var ret []string
		return ret
	}
	return o.FileUpload
}

// GetFileUploadOk returns a tuple with the FileUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetFileUploadOk() ([]string, bool) {
	if o == nil || IsNil(o.FileUpload) {
		return nil, false
	}
	return o.FileUpload, true
}

// HasFileUpload returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasFileUpload() bool {
	if o != nil && !IsNil(o.FileUpload) {
		return true
	}

	return false
}

// SetFileUpload gets a reference to the given []string and assigns it to the FileUpload field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetFileUpload(v []string) {
	o.FileUpload = v
}

// GetFileUploadSensitivity returns the FileUploadSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetFileUploadSensitivity() []string {
	if o == nil || IsNil(o.FileUploadSensitivity) {
		var ret []string
		return ret
	}
	return o.FileUploadSensitivity
}

// GetFileUploadSensitivityOk returns a tuple with the FileUploadSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetFileUploadSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.FileUploadSensitivity) {
		return nil, false
	}
	return o.FileUploadSensitivity, true
}

// HasFileUploadSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasFileUploadSensitivity() bool {
	if o != nil && !IsNil(o.FileUploadSensitivity) {
		return true
	}

	return false
}

// SetFileUploadSensitivity gets a reference to the given []string and assigns it to the FileUploadSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetFileUploadSensitivity(v []string) {
	o.FileUploadSensitivity = v
}

// GetIdentifiedAttack returns the IdentifiedAttack field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetIdentifiedAttack() []string {
	if o == nil || IsNil(o.IdentifiedAttack) {
		var ret []string
		return ret
	}
	return o.IdentifiedAttack
}

// GetIdentifiedAttackOk returns a tuple with the IdentifiedAttack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetIdentifiedAttackOk() ([]string, bool) {
	if o == nil || IsNil(o.IdentifiedAttack) {
		return nil, false
	}
	return o.IdentifiedAttack, true
}

// HasIdentifiedAttack returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasIdentifiedAttack() bool {
	if o != nil && !IsNil(o.IdentifiedAttack) {
		return true
	}

	return false
}

// SetIdentifiedAttack gets a reference to the given []string and assigns it to the IdentifiedAttack field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetIdentifiedAttack(v []string) {
	o.IdentifiedAttack = v
}

// GetIdentifiedAttackSensitivity returns the IdentifiedAttackSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetIdentifiedAttackSensitivity() []string {
	if o == nil || IsNil(o.IdentifiedAttackSensitivity) {
		var ret []string
		return ret
	}
	return o.IdentifiedAttackSensitivity
}

// GetIdentifiedAttackSensitivityOk returns a tuple with the IdentifiedAttackSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetIdentifiedAttackSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.IdentifiedAttackSensitivity) {
		return nil, false
	}
	return o.IdentifiedAttackSensitivity, true
}

// HasIdentifiedAttackSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasIdentifiedAttackSensitivity() bool {
	if o != nil && !IsNil(o.IdentifiedAttackSensitivity) {
		return true
	}

	return false
}

// SetIdentifiedAttackSensitivity gets a reference to the given []string and assigns it to the IdentifiedAttackSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetIdentifiedAttackSensitivity(v []string) {
	o.IdentifiedAttackSensitivity = v
}

// GetRemoteFileInclusion returns the RemoteFileInclusion field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetRemoteFileInclusion() []string {
	if o == nil || IsNil(o.RemoteFileInclusion) {
		var ret []string
		return ret
	}
	return o.RemoteFileInclusion
}

// GetRemoteFileInclusionOk returns a tuple with the RemoteFileInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetRemoteFileInclusionOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoteFileInclusion) {
		return nil, false
	}
	return o.RemoteFileInclusion, true
}

// HasRemoteFileInclusion returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasRemoteFileInclusion() bool {
	if o != nil && !IsNil(o.RemoteFileInclusion) {
		return true
	}

	return false
}

// SetRemoteFileInclusion gets a reference to the given []string and assigns it to the RemoteFileInclusion field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetRemoteFileInclusion(v []string) {
	o.RemoteFileInclusion = v
}

// GetRemoteFileInclusionSensitivity returns the RemoteFileInclusionSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetRemoteFileInclusionSensitivity() []string {
	if o == nil || IsNil(o.RemoteFileInclusionSensitivity) {
		var ret []string
		return ret
	}
	return o.RemoteFileInclusionSensitivity
}

// GetRemoteFileInclusionSensitivityOk returns a tuple with the RemoteFileInclusionSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetRemoteFileInclusionSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoteFileInclusionSensitivity) {
		return nil, false
	}
	return o.RemoteFileInclusionSensitivity, true
}

// HasRemoteFileInclusionSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasRemoteFileInclusionSensitivity() bool {
	if o != nil && !IsNil(o.RemoteFileInclusionSensitivity) {
		return true
	}

	return false
}

// SetRemoteFileInclusionSensitivity gets a reference to the given []string and assigns it to the RemoteFileInclusionSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetRemoteFileInclusionSensitivity(v []string) {
	o.RemoteFileInclusionSensitivity = v
}

// GetSqlInjection returns the SqlInjection field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetSqlInjection() []string {
	if o == nil || IsNil(o.SqlInjection) {
		var ret []string
		return ret
	}
	return o.SqlInjection
}

// GetSqlInjectionOk returns a tuple with the SqlInjection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetSqlInjectionOk() ([]string, bool) {
	if o == nil || IsNil(o.SqlInjection) {
		return nil, false
	}
	return o.SqlInjection, true
}

// HasSqlInjection returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasSqlInjection() bool {
	if o != nil && !IsNil(o.SqlInjection) {
		return true
	}

	return false
}

// SetSqlInjection gets a reference to the given []string and assigns it to the SqlInjection field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetSqlInjection(v []string) {
	o.SqlInjection = v
}

// GetSqlInjectionSensitivity returns the SqlInjectionSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetSqlInjectionSensitivity() []string {
	if o == nil || IsNil(o.SqlInjectionSensitivity) {
		var ret []string
		return ret
	}
	return o.SqlInjectionSensitivity
}

// GetSqlInjectionSensitivityOk returns a tuple with the SqlInjectionSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetSqlInjectionSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.SqlInjectionSensitivity) {
		return nil, false
	}
	return o.SqlInjectionSensitivity, true
}

// HasSqlInjectionSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasSqlInjectionSensitivity() bool {
	if o != nil && !IsNil(o.SqlInjectionSensitivity) {
		return true
	}

	return false
}

// SetSqlInjectionSensitivity gets a reference to the given []string and assigns it to the SqlInjectionSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetSqlInjectionSensitivity(v []string) {
	o.SqlInjectionSensitivity = v
}

// GetUnwantedAccess returns the UnwantedAccess field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetUnwantedAccess() []string {
	if o == nil || IsNil(o.UnwantedAccess) {
		var ret []string
		return ret
	}
	return o.UnwantedAccess
}

// GetUnwantedAccessOk returns a tuple with the UnwantedAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetUnwantedAccessOk() ([]string, bool) {
	if o == nil || IsNil(o.UnwantedAccess) {
		return nil, false
	}
	return o.UnwantedAccess, true
}

// HasUnwantedAccess returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasUnwantedAccess() bool {
	if o != nil && !IsNil(o.UnwantedAccess) {
		return true
	}

	return false
}

// SetUnwantedAccess gets a reference to the given []string and assigns it to the UnwantedAccess field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetUnwantedAccess(v []string) {
	o.UnwantedAccess = v
}

// GetUnwantedAccessSensitivity returns the UnwantedAccessSensitivity field value if set, zero value otherwise.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetUnwantedAccessSensitivity() []string {
	if o == nil || IsNil(o.UnwantedAccessSensitivity) {
		var ret []string
		return ret
	}
	return o.UnwantedAccessSensitivity
}

// GetUnwantedAccessSensitivityOk returns a tuple with the UnwantedAccessSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) GetUnwantedAccessSensitivityOk() ([]string, bool) {
	if o == nil || IsNil(o.UnwantedAccessSensitivity) {
		return nil, false
	}
	return o.UnwantedAccessSensitivity, true
}

// HasUnwantedAccessSensitivity returns a boolean if a field has been set.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) HasUnwantedAccessSensitivity() bool {
	if o != nil && !IsNil(o.UnwantedAccessSensitivity) {
		return true
	}

	return false
}

// SetUnwantedAccessSensitivity gets a reference to the given []string and assigns it to the UnwantedAccessSensitivity field.
func (o *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) SetUnwantedAccessSensitivity(v []string) {
	o.UnwantedAccessSensitivity = v
}

func (o ResponseBadRequestSerializerMetaclassThreatsConfigurationField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestSerializerMetaclassThreatsConfigurationField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CrossSiteScripting) {
		toSerialize["cross_site_scripting"] = o.CrossSiteScripting
	}
	if !IsNil(o.CrossSiteScriptingSensitivity) {
		toSerialize["cross_site_scripting_sensitivity"] = o.CrossSiteScriptingSensitivity
	}
	if !IsNil(o.DirectoryTraversal) {
		toSerialize["directory_traversal"] = o.DirectoryTraversal
	}
	if !IsNil(o.DirectoryTraversalSensitivity) {
		toSerialize["directory_traversal_sensitivity"] = o.DirectoryTraversalSensitivity
	}
	if !IsNil(o.EvadingTricks) {
		toSerialize["evading_tricks"] = o.EvadingTricks
	}
	if !IsNil(o.EvadingTricksSensitivity) {
		toSerialize["evading_tricks_sensitivity"] = o.EvadingTricksSensitivity
	}
	if !IsNil(o.FileUpload) {
		toSerialize["file_upload"] = o.FileUpload
	}
	if !IsNil(o.FileUploadSensitivity) {
		toSerialize["file_upload_sensitivity"] = o.FileUploadSensitivity
	}
	if !IsNil(o.IdentifiedAttack) {
		toSerialize["identified_attack"] = o.IdentifiedAttack
	}
	if !IsNil(o.IdentifiedAttackSensitivity) {
		toSerialize["identified_attack_sensitivity"] = o.IdentifiedAttackSensitivity
	}
	if !IsNil(o.RemoteFileInclusion) {
		toSerialize["remote_file_inclusion"] = o.RemoteFileInclusion
	}
	if !IsNil(o.RemoteFileInclusionSensitivity) {
		toSerialize["remote_file_inclusion_sensitivity"] = o.RemoteFileInclusionSensitivity
	}
	if !IsNil(o.SqlInjection) {
		toSerialize["sql_injection"] = o.SqlInjection
	}
	if !IsNil(o.SqlInjectionSensitivity) {
		toSerialize["sql_injection_sensitivity"] = o.SqlInjectionSensitivity
	}
	if !IsNil(o.UnwantedAccess) {
		toSerialize["unwanted_access"] = o.UnwantedAccess
	}
	if !IsNil(o.UnwantedAccessSensitivity) {
		toSerialize["unwanted_access_sensitivity"] = o.UnwantedAccessSensitivity
	}
	return toSerialize, nil
}

type NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField struct {
	value *ResponseBadRequestSerializerMetaclassThreatsConfigurationField
	isSet bool
}

func (v NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField) Get() *ResponseBadRequestSerializerMetaclassThreatsConfigurationField {
	return v.value
}

func (v *NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField) Set(val *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestSerializerMetaclassThreatsConfigurationField(val *ResponseBadRequestSerializerMetaclassThreatsConfigurationField) *NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField {
	return &NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField{value: val, isSet: true}
}

func (v NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestSerializerMetaclassThreatsConfigurationField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


