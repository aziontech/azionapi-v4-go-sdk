/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MatchZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchZone{}

// MatchZone struct for MatchZone
type MatchZone struct {
	Zone string `json:"zone"`
	ZoneInput NullableString `json:"zone_input,omitempty" validate:"regexp=[a-zA-Z0-9<>?()]+"`
	MatchesOn NullableString `json:"matches_on,omitempty"`
}

type _MatchZone MatchZone

// NewMatchZone instantiates a new MatchZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchZone(zone string) *MatchZone {
	this := MatchZone{}
	this.Zone = zone
	return &this
}

// NewMatchZoneWithDefaults instantiates a new MatchZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchZoneWithDefaults() *MatchZone {
	this := MatchZone{}
	return &this
}

// GetZone returns the Zone field value
func (o *MatchZone) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *MatchZone) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *MatchZone) SetZone(v string) {
	o.Zone = v
}

// GetZoneInput returns the ZoneInput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchZone) GetZoneInput() string {
	if o == nil || IsNil(o.ZoneInput.Get()) {
		var ret string
		return ret
	}
	return *o.ZoneInput.Get()
}

// GetZoneInputOk returns a tuple with the ZoneInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchZone) GetZoneInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoneInput.Get(), o.ZoneInput.IsSet()
}

// HasZoneInput returns a boolean if a field has been set.
func (o *MatchZone) HasZoneInput() bool {
	if o != nil && o.ZoneInput.IsSet() {
		return true
	}

	return false
}

// SetZoneInput gets a reference to the given NullableString and assigns it to the ZoneInput field.
func (o *MatchZone) SetZoneInput(v string) {
	o.ZoneInput.Set(&v)
}
// SetZoneInputNil sets the value for ZoneInput to be an explicit nil
func (o *MatchZone) SetZoneInputNil() {
	o.ZoneInput.Set(nil)
}

// UnsetZoneInput ensures that no value is present for ZoneInput, not even an explicit nil
func (o *MatchZone) UnsetZoneInput() {
	o.ZoneInput.Unset()
}

// GetMatchesOn returns the MatchesOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchZone) GetMatchesOn() string {
	if o == nil || IsNil(o.MatchesOn.Get()) {
		var ret string
		return ret
	}
	return *o.MatchesOn.Get()
}

// GetMatchesOnOk returns a tuple with the MatchesOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchZone) GetMatchesOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchesOn.Get(), o.MatchesOn.IsSet()
}

// HasMatchesOn returns a boolean if a field has been set.
func (o *MatchZone) HasMatchesOn() bool {
	if o != nil && o.MatchesOn.IsSet() {
		return true
	}

	return false
}

// SetMatchesOn gets a reference to the given NullableString and assigns it to the MatchesOn field.
func (o *MatchZone) SetMatchesOn(v string) {
	o.MatchesOn.Set(&v)
}
// SetMatchesOnNil sets the value for MatchesOn to be an explicit nil
func (o *MatchZone) SetMatchesOnNil() {
	o.MatchesOn.Set(nil)
}

// UnsetMatchesOn ensures that no value is present for MatchesOn, not even an explicit nil
func (o *MatchZone) UnsetMatchesOn() {
	o.MatchesOn.Unset()
}

func (o MatchZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zone"] = o.Zone
	if o.ZoneInput.IsSet() {
		toSerialize["zone_input"] = o.ZoneInput.Get()
	}
	if o.MatchesOn.IsSet() {
		toSerialize["matches_on"] = o.MatchesOn.Get()
	}
	return toSerialize, nil
}

func (o *MatchZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatchZone := _MatchZone{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatchZone)

	if err != nil {
		return err
	}

	*o = MatchZone(varMatchZone)

	return err
}

type NullableMatchZone struct {
	value *MatchZone
	isSet bool
}

func (v NullableMatchZone) Get() *MatchZone {
	return v.value
}

func (v *NullableMatchZone) Set(val *MatchZone) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchZone) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchZone(val *MatchZone) *NullableMatchZone {
	return &NullableMatchZone{value: val, isSet: true}
}

func (v NullableMatchZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


