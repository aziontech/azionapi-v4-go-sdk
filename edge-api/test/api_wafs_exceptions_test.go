/*
edge-api

Testing WAFsExceptionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edge

import (
	"context"
	"testing"

	openapiclient "github.com/aziontech/azionapi-v4-go-sdk/edge-api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_edge_WAFsExceptionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WAFsExceptionsAPIService CreateWAFException", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wafId string

		resp, httpRes, err := apiClient.WAFsExceptionsAPI.CreateWAFException(context.Background(), wafId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WAFsExceptionsAPIService DestroyWAFException", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var wafId string

		resp, httpRes, err := apiClient.WAFsExceptionsAPI.DestroyWAFException(context.Background(), id, wafId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WAFsExceptionsAPIService ListWAFExceptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wafId string

		resp, httpRes, err := apiClient.WAFsExceptionsAPI.ListWAFExceptions(context.Background(), wafId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WAFsExceptionsAPIService PartialUpdateWAFException", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var wafId string

		resp, httpRes, err := apiClient.WAFsExceptionsAPI.PartialUpdateWAFException(context.Background(), id, wafId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WAFsExceptionsAPIService RetrieveWAFException", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var wafId string

		resp, httpRes, err := apiClient.WAFsExceptionsAPI.RetrieveWAFException(context.Background(), id, wafId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WAFsExceptionsAPIService UpdateWAFException", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var wafId string

		resp, httpRes, err := apiClient.WAFsExceptionsAPI.UpdateWAFException(context.Background(), id, wafId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
