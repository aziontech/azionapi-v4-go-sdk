/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
)

// checks if the PatchedDataStreamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedDataStreamRequest{}

// PatchedDataStreamRequest struct for PatchedDataStreamRequest
type PatchedDataStreamRequest struct {
	Name *string `json:"name,omitempty" validate:"regexp=.*"`
	// * `http` - Edge Applications * `waf` - WAF Events * `cells_console` - Edge Functions * `rtm_activity` - Activity History
	DataSource *string `json:"data_source,omitempty"`
	DataSetId *int64 `json:"data_set_id,omitempty"`
	Active *bool `json:"active,omitempty"`
	Filters *DataStreamFilterRequest `json:"filters,omitempty"`
}

// NewPatchedDataStreamRequest instantiates a new PatchedDataStreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedDataStreamRequest() *PatchedDataStreamRequest {
	this := PatchedDataStreamRequest{}
	return &this
}

// NewPatchedDataStreamRequestWithDefaults instantiates a new PatchedDataStreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedDataStreamRequestWithDefaults() *PatchedDataStreamRequest {
	this := PatchedDataStreamRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedDataStreamRequest) SetName(v string) {
	o.Name = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetDataSource() string {
	if o == nil || IsNil(o.DataSource) {
		var ret string
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetDataSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given string and assigns it to the DataSource field.
func (o *PatchedDataStreamRequest) SetDataSource(v string) {
	o.DataSource = &v
}

// GetDataSetId returns the DataSetId field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetDataSetId() int64 {
	if o == nil || IsNil(o.DataSetId) {
		var ret int64
		return ret
	}
	return *o.DataSetId
}

// GetDataSetIdOk returns a tuple with the DataSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetDataSetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DataSetId) {
		return nil, false
	}
	return o.DataSetId, true
}

// HasDataSetId returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasDataSetId() bool {
	if o != nil && !IsNil(o.DataSetId) {
		return true
	}

	return false
}

// SetDataSetId gets a reference to the given int64 and assigns it to the DataSetId field.
func (o *PatchedDataStreamRequest) SetDataSetId(v int64) {
	o.DataSetId = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PatchedDataStreamRequest) SetActive(v bool) {
	o.Active = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PatchedDataStreamRequest) GetFilters() DataStreamFilterRequest {
	if o == nil || IsNil(o.Filters) {
		var ret DataStreamFilterRequest
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedDataStreamRequest) GetFiltersOk() (*DataStreamFilterRequest, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PatchedDataStreamRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given DataStreamFilterRequest and assigns it to the Filters field.
func (o *PatchedDataStreamRequest) SetFilters(v DataStreamFilterRequest) {
	o.Filters = &v
}

func (o PatchedDataStreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedDataStreamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DataSource) {
		toSerialize["data_source"] = o.DataSource
	}
	if !IsNil(o.DataSetId) {
		toSerialize["data_set_id"] = o.DataSetId
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullablePatchedDataStreamRequest struct {
	value *PatchedDataStreamRequest
	isSet bool
}

func (v NullablePatchedDataStreamRequest) Get() *PatchedDataStreamRequest {
	return v.value
}

func (v *NullablePatchedDataStreamRequest) Set(val *PatchedDataStreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedDataStreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedDataStreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedDataStreamRequest(val *PatchedDataStreamRequest) *NullablePatchedDataStreamRequest {
	return &NullablePatchedDataStreamRequest{value: val, isSet: true}
}

func (v NullablePatchedDataStreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedDataStreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


