/*
data-stream-api

REST API OpenAPI documentation for the Data Stream

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package data-stream-api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EndpointRequest - struct for EndpointRequest
type EndpointRequest struct {
	AWSKinesisFirehoseEndpointRequest *AWSKinesisFirehoseEndpointRequest
	AzureBlobStorageEndpointRequest *AzureBlobStorageEndpointRequest
	AzureMonitorEndpointRequest *AzureMonitorEndpointRequest
	BigQueryEndpointRequest *BigQueryEndpointRequest
	DatadogEndpointRequest *DatadogEndpointRequest
	ElasticsearchEndpointRequest *ElasticsearchEndpointRequest
	HttpPostEndpointRequest *HttpPostEndpointRequest
	KafkaEndpointRequest *KafkaEndpointRequest
	QRadarEndpointRequest *QRadarEndpointRequest
	S3EndpointRequest *S3EndpointRequest
	SplunkEndpointRequest *SplunkEndpointRequest
}

// AWSKinesisFirehoseEndpointRequestAsEndpointRequest is a convenience function that returns AWSKinesisFirehoseEndpointRequest wrapped in EndpointRequest
func AWSKinesisFirehoseEndpointRequestAsEndpointRequest(v *AWSKinesisFirehoseEndpointRequest) EndpointRequest {
	return EndpointRequest{
		AWSKinesisFirehoseEndpointRequest: v,
	}
}

// AzureBlobStorageEndpointRequestAsEndpointRequest is a convenience function that returns AzureBlobStorageEndpointRequest wrapped in EndpointRequest
func AzureBlobStorageEndpointRequestAsEndpointRequest(v *AzureBlobStorageEndpointRequest) EndpointRequest {
	return EndpointRequest{
		AzureBlobStorageEndpointRequest: v,
	}
}

// AzureMonitorEndpointRequestAsEndpointRequest is a convenience function that returns AzureMonitorEndpointRequest wrapped in EndpointRequest
func AzureMonitorEndpointRequestAsEndpointRequest(v *AzureMonitorEndpointRequest) EndpointRequest {
	return EndpointRequest{
		AzureMonitorEndpointRequest: v,
	}
}

// BigQueryEndpointRequestAsEndpointRequest is a convenience function that returns BigQueryEndpointRequest wrapped in EndpointRequest
func BigQueryEndpointRequestAsEndpointRequest(v *BigQueryEndpointRequest) EndpointRequest {
	return EndpointRequest{
		BigQueryEndpointRequest: v,
	}
}

// DatadogEndpointRequestAsEndpointRequest is a convenience function that returns DatadogEndpointRequest wrapped in EndpointRequest
func DatadogEndpointRequestAsEndpointRequest(v *DatadogEndpointRequest) EndpointRequest {
	return EndpointRequest{
		DatadogEndpointRequest: v,
	}
}

// ElasticsearchEndpointRequestAsEndpointRequest is a convenience function that returns ElasticsearchEndpointRequest wrapped in EndpointRequest
func ElasticsearchEndpointRequestAsEndpointRequest(v *ElasticsearchEndpointRequest) EndpointRequest {
	return EndpointRequest{
		ElasticsearchEndpointRequest: v,
	}
}

// HttpPostEndpointRequestAsEndpointRequest is a convenience function that returns HttpPostEndpointRequest wrapped in EndpointRequest
func HttpPostEndpointRequestAsEndpointRequest(v *HttpPostEndpointRequest) EndpointRequest {
	return EndpointRequest{
		HttpPostEndpointRequest: v,
	}
}

// KafkaEndpointRequestAsEndpointRequest is a convenience function that returns KafkaEndpointRequest wrapped in EndpointRequest
func KafkaEndpointRequestAsEndpointRequest(v *KafkaEndpointRequest) EndpointRequest {
	return EndpointRequest{
		KafkaEndpointRequest: v,
	}
}

// QRadarEndpointRequestAsEndpointRequest is a convenience function that returns QRadarEndpointRequest wrapped in EndpointRequest
func QRadarEndpointRequestAsEndpointRequest(v *QRadarEndpointRequest) EndpointRequest {
	return EndpointRequest{
		QRadarEndpointRequest: v,
	}
}

// S3EndpointRequestAsEndpointRequest is a convenience function that returns S3EndpointRequest wrapped in EndpointRequest
func S3EndpointRequestAsEndpointRequest(v *S3EndpointRequest) EndpointRequest {
	return EndpointRequest{
		S3EndpointRequest: v,
	}
}

// SplunkEndpointRequestAsEndpointRequest is a convenience function that returns SplunkEndpointRequest wrapped in EndpointRequest
func SplunkEndpointRequestAsEndpointRequest(v *SplunkEndpointRequest) EndpointRequest {
	return EndpointRequest{
		SplunkEndpointRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EndpointRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSKinesisFirehoseEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.AWSKinesisFirehoseEndpointRequest)
	if err == nil {
		jsonAWSKinesisFirehoseEndpointRequest, _ := json.Marshal(dst.AWSKinesisFirehoseEndpointRequest)
		if string(jsonAWSKinesisFirehoseEndpointRequest) == "{}" { // empty struct
			dst.AWSKinesisFirehoseEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.AWSKinesisFirehoseEndpointRequest); err != nil {
				dst.AWSKinesisFirehoseEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.AWSKinesisFirehoseEndpointRequest = nil
	}

	// try to unmarshal data into AzureBlobStorageEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.AzureBlobStorageEndpointRequest)
	if err == nil {
		jsonAzureBlobStorageEndpointRequest, _ := json.Marshal(dst.AzureBlobStorageEndpointRequest)
		if string(jsonAzureBlobStorageEndpointRequest) == "{}" { // empty struct
			dst.AzureBlobStorageEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.AzureBlobStorageEndpointRequest); err != nil {
				dst.AzureBlobStorageEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.AzureBlobStorageEndpointRequest = nil
	}

	// try to unmarshal data into AzureMonitorEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.AzureMonitorEndpointRequest)
	if err == nil {
		jsonAzureMonitorEndpointRequest, _ := json.Marshal(dst.AzureMonitorEndpointRequest)
		if string(jsonAzureMonitorEndpointRequest) == "{}" { // empty struct
			dst.AzureMonitorEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.AzureMonitorEndpointRequest); err != nil {
				dst.AzureMonitorEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.AzureMonitorEndpointRequest = nil
	}

	// try to unmarshal data into BigQueryEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.BigQueryEndpointRequest)
	if err == nil {
		jsonBigQueryEndpointRequest, _ := json.Marshal(dst.BigQueryEndpointRequest)
		if string(jsonBigQueryEndpointRequest) == "{}" { // empty struct
			dst.BigQueryEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.BigQueryEndpointRequest); err != nil {
				dst.BigQueryEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.BigQueryEndpointRequest = nil
	}

	// try to unmarshal data into DatadogEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.DatadogEndpointRequest)
	if err == nil {
		jsonDatadogEndpointRequest, _ := json.Marshal(dst.DatadogEndpointRequest)
		if string(jsonDatadogEndpointRequest) == "{}" { // empty struct
			dst.DatadogEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.DatadogEndpointRequest); err != nil {
				dst.DatadogEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.DatadogEndpointRequest = nil
	}

	// try to unmarshal data into ElasticsearchEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.ElasticsearchEndpointRequest)
	if err == nil {
		jsonElasticsearchEndpointRequest, _ := json.Marshal(dst.ElasticsearchEndpointRequest)
		if string(jsonElasticsearchEndpointRequest) == "{}" { // empty struct
			dst.ElasticsearchEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.ElasticsearchEndpointRequest); err != nil {
				dst.ElasticsearchEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ElasticsearchEndpointRequest = nil
	}

	// try to unmarshal data into HttpPostEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.HttpPostEndpointRequest)
	if err == nil {
		jsonHttpPostEndpointRequest, _ := json.Marshal(dst.HttpPostEndpointRequest)
		if string(jsonHttpPostEndpointRequest) == "{}" { // empty struct
			dst.HttpPostEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.HttpPostEndpointRequest); err != nil {
				dst.HttpPostEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.HttpPostEndpointRequest = nil
	}

	// try to unmarshal data into KafkaEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.KafkaEndpointRequest)
	if err == nil {
		jsonKafkaEndpointRequest, _ := json.Marshal(dst.KafkaEndpointRequest)
		if string(jsonKafkaEndpointRequest) == "{}" { // empty struct
			dst.KafkaEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.KafkaEndpointRequest); err != nil {
				dst.KafkaEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.KafkaEndpointRequest = nil
	}

	// try to unmarshal data into QRadarEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.QRadarEndpointRequest)
	if err == nil {
		jsonQRadarEndpointRequest, _ := json.Marshal(dst.QRadarEndpointRequest)
		if string(jsonQRadarEndpointRequest) == "{}" { // empty struct
			dst.QRadarEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.QRadarEndpointRequest); err != nil {
				dst.QRadarEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.QRadarEndpointRequest = nil
	}

	// try to unmarshal data into S3EndpointRequest
	err = newStrictDecoder(data).Decode(&dst.S3EndpointRequest)
	if err == nil {
		jsonS3EndpointRequest, _ := json.Marshal(dst.S3EndpointRequest)
		if string(jsonS3EndpointRequest) == "{}" { // empty struct
			dst.S3EndpointRequest = nil
		} else {
			if err = validator.Validate(dst.S3EndpointRequest); err != nil {
				dst.S3EndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.S3EndpointRequest = nil
	}

	// try to unmarshal data into SplunkEndpointRequest
	err = newStrictDecoder(data).Decode(&dst.SplunkEndpointRequest)
	if err == nil {
		jsonSplunkEndpointRequest, _ := json.Marshal(dst.SplunkEndpointRequest)
		if string(jsonSplunkEndpointRequest) == "{}" { // empty struct
			dst.SplunkEndpointRequest = nil
		} else {
			if err = validator.Validate(dst.SplunkEndpointRequest); err != nil {
				dst.SplunkEndpointRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.SplunkEndpointRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSKinesisFirehoseEndpointRequest = nil
		dst.AzureBlobStorageEndpointRequest = nil
		dst.AzureMonitorEndpointRequest = nil
		dst.BigQueryEndpointRequest = nil
		dst.DatadogEndpointRequest = nil
		dst.ElasticsearchEndpointRequest = nil
		dst.HttpPostEndpointRequest = nil
		dst.KafkaEndpointRequest = nil
		dst.QRadarEndpointRequest = nil
		dst.S3EndpointRequest = nil
		dst.SplunkEndpointRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EndpointRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EndpointRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EndpointRequest) MarshalJSON() ([]byte, error) {
	if src.AWSKinesisFirehoseEndpointRequest != nil {
		return json.Marshal(&src.AWSKinesisFirehoseEndpointRequest)
	}

	if src.AzureBlobStorageEndpointRequest != nil {
		return json.Marshal(&src.AzureBlobStorageEndpointRequest)
	}

	if src.AzureMonitorEndpointRequest != nil {
		return json.Marshal(&src.AzureMonitorEndpointRequest)
	}

	if src.BigQueryEndpointRequest != nil {
		return json.Marshal(&src.BigQueryEndpointRequest)
	}

	if src.DatadogEndpointRequest != nil {
		return json.Marshal(&src.DatadogEndpointRequest)
	}

	if src.ElasticsearchEndpointRequest != nil {
		return json.Marshal(&src.ElasticsearchEndpointRequest)
	}

	if src.HttpPostEndpointRequest != nil {
		return json.Marshal(&src.HttpPostEndpointRequest)
	}

	if src.KafkaEndpointRequest != nil {
		return json.Marshal(&src.KafkaEndpointRequest)
	}

	if src.QRadarEndpointRequest != nil {
		return json.Marshal(&src.QRadarEndpointRequest)
	}

	if src.S3EndpointRequest != nil {
		return json.Marshal(&src.S3EndpointRequest)
	}

	if src.SplunkEndpointRequest != nil {
		return json.Marshal(&src.SplunkEndpointRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EndpointRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSKinesisFirehoseEndpointRequest != nil {
		return obj.AWSKinesisFirehoseEndpointRequest
	}

	if obj.AzureBlobStorageEndpointRequest != nil {
		return obj.AzureBlobStorageEndpointRequest
	}

	if obj.AzureMonitorEndpointRequest != nil {
		return obj.AzureMonitorEndpointRequest
	}

	if obj.BigQueryEndpointRequest != nil {
		return obj.BigQueryEndpointRequest
	}

	if obj.DatadogEndpointRequest != nil {
		return obj.DatadogEndpointRequest
	}

	if obj.ElasticsearchEndpointRequest != nil {
		return obj.ElasticsearchEndpointRequest
	}

	if obj.HttpPostEndpointRequest != nil {
		return obj.HttpPostEndpointRequest
	}

	if obj.KafkaEndpointRequest != nil {
		return obj.KafkaEndpointRequest
	}

	if obj.QRadarEndpointRequest != nil {
		return obj.QRadarEndpointRequest
	}

	if obj.S3EndpointRequest != nil {
		return obj.S3EndpointRequest
	}

	if obj.SplunkEndpointRequest != nil {
		return obj.SplunkEndpointRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EndpointRequest) GetActualInstanceValue() (interface{}) {
	if obj.AWSKinesisFirehoseEndpointRequest != nil {
		return *obj.AWSKinesisFirehoseEndpointRequest
	}

	if obj.AzureBlobStorageEndpointRequest != nil {
		return *obj.AzureBlobStorageEndpointRequest
	}

	if obj.AzureMonitorEndpointRequest != nil {
		return *obj.AzureMonitorEndpointRequest
	}

	if obj.BigQueryEndpointRequest != nil {
		return *obj.BigQueryEndpointRequest
	}

	if obj.DatadogEndpointRequest != nil {
		return *obj.DatadogEndpointRequest
	}

	if obj.ElasticsearchEndpointRequest != nil {
		return *obj.ElasticsearchEndpointRequest
	}

	if obj.HttpPostEndpointRequest != nil {
		return *obj.HttpPostEndpointRequest
	}

	if obj.KafkaEndpointRequest != nil {
		return *obj.KafkaEndpointRequest
	}

	if obj.QRadarEndpointRequest != nil {
		return *obj.QRadarEndpointRequest
	}

	if obj.S3EndpointRequest != nil {
		return *obj.S3EndpointRequest
	}

	if obj.SplunkEndpointRequest != nil {
		return *obj.SplunkEndpointRequest
	}

	// all schemas are nil
	return nil
}

type NullableEndpointRequest struct {
	value *EndpointRequest
	isSet bool
}

func (v NullableEndpointRequest) Get() *EndpointRequest {
	return v.value
}

func (v *NullableEndpointRequest) Set(val *EndpointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointRequest(val *EndpointRequest) *NullableEndpointRequest {
	return &NullableEndpointRequest{value: val, isSet: true}
}

func (v NullableEndpointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


