/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge/api/openapi

import (
	"encoding/json"
)

// checks if the WAFThreatsConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WAFThreatsConfiguration{}

// WAFThreatsConfiguration struct for WAFThreatsConfiguration
type WAFThreatsConfiguration struct {
	CrossSiteScripting *bool `json:"cross_site_scripting,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	CrossSiteScriptingSensitivity *string `json:"cross_site_scripting_sensitivity,omitempty"`
	DirectoryTraversal *bool `json:"directory_traversal,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	DirectoryTraversalSensitivity *string `json:"directory_traversal_sensitivity,omitempty"`
	EvadingTricks *bool `json:"evading_tricks,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	EvadingTricksSensitivity *string `json:"evading_tricks_sensitivity,omitempty"`
	FileUpload *bool `json:"file_upload,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	FileUploadSensitivity *string `json:"file_upload_sensitivity,omitempty"`
	IdentifiedAttack *bool `json:"identified_attack,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	IdentifiedAttackSensitivity *string `json:"identified_attack_sensitivity,omitempty"`
	RemoteFileInclusion *bool `json:"remote_file_inclusion,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	RemoteFileInclusionSensitivity *string `json:"remote_file_inclusion_sensitivity,omitempty"`
	SqlInjection *bool `json:"sql_injection,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	SqlInjectionSensitivity *string `json:"sql_injection_sensitivity,omitempty"`
	UnwantedAccess *bool `json:"unwanted_access,omitempty"`
	// * `lowest` - lowest * `low` - low * `medium` - medium * `high` - high * `highest` - highest
	UnwantedAccessSensitivity *string `json:"unwanted_access_sensitivity,omitempty"`
}

// NewWAFThreatsConfiguration instantiates a new WAFThreatsConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWAFThreatsConfiguration() *WAFThreatsConfiguration {
	this := WAFThreatsConfiguration{}
	var crossSiteScripting bool = true
	this.CrossSiteScripting = &crossSiteScripting
	var crossSiteScriptingSensitivity string = "medium"
	this.CrossSiteScriptingSensitivity = &crossSiteScriptingSensitivity
	var directoryTraversal bool = true
	this.DirectoryTraversal = &directoryTraversal
	var directoryTraversalSensitivity string = "medium"
	this.DirectoryTraversalSensitivity = &directoryTraversalSensitivity
	var evadingTricks bool = true
	this.EvadingTricks = &evadingTricks
	var evadingTricksSensitivity string = "medium"
	this.EvadingTricksSensitivity = &evadingTricksSensitivity
	var fileUpload bool = true
	this.FileUpload = &fileUpload
	var fileUploadSensitivity string = "medium"
	this.FileUploadSensitivity = &fileUploadSensitivity
	var identifiedAttack bool = true
	this.IdentifiedAttack = &identifiedAttack
	var identifiedAttackSensitivity string = "medium"
	this.IdentifiedAttackSensitivity = &identifiedAttackSensitivity
	var remoteFileInclusion bool = true
	this.RemoteFileInclusion = &remoteFileInclusion
	var remoteFileInclusionSensitivity string = "medium"
	this.RemoteFileInclusionSensitivity = &remoteFileInclusionSensitivity
	var sqlInjection bool = true
	this.SqlInjection = &sqlInjection
	var sqlInjectionSensitivity string = "medium"
	this.SqlInjectionSensitivity = &sqlInjectionSensitivity
	var unwantedAccess bool = true
	this.UnwantedAccess = &unwantedAccess
	var unwantedAccessSensitivity string = "medium"
	this.UnwantedAccessSensitivity = &unwantedAccessSensitivity
	return &this
}

// NewWAFThreatsConfigurationWithDefaults instantiates a new WAFThreatsConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWAFThreatsConfigurationWithDefaults() *WAFThreatsConfiguration {
	this := WAFThreatsConfiguration{}
	var crossSiteScripting bool = true
	this.CrossSiteScripting = &crossSiteScripting
	var crossSiteScriptingSensitivity string = "medium"
	this.CrossSiteScriptingSensitivity = &crossSiteScriptingSensitivity
	var directoryTraversal bool = true
	this.DirectoryTraversal = &directoryTraversal
	var directoryTraversalSensitivity string = "medium"
	this.DirectoryTraversalSensitivity = &directoryTraversalSensitivity
	var evadingTricks bool = true
	this.EvadingTricks = &evadingTricks
	var evadingTricksSensitivity string = "medium"
	this.EvadingTricksSensitivity = &evadingTricksSensitivity
	var fileUpload bool = true
	this.FileUpload = &fileUpload
	var fileUploadSensitivity string = "medium"
	this.FileUploadSensitivity = &fileUploadSensitivity
	var identifiedAttack bool = true
	this.IdentifiedAttack = &identifiedAttack
	var identifiedAttackSensitivity string = "medium"
	this.IdentifiedAttackSensitivity = &identifiedAttackSensitivity
	var remoteFileInclusion bool = true
	this.RemoteFileInclusion = &remoteFileInclusion
	var remoteFileInclusionSensitivity string = "medium"
	this.RemoteFileInclusionSensitivity = &remoteFileInclusionSensitivity
	var sqlInjection bool = true
	this.SqlInjection = &sqlInjection
	var sqlInjectionSensitivity string = "medium"
	this.SqlInjectionSensitivity = &sqlInjectionSensitivity
	var unwantedAccess bool = true
	this.UnwantedAccess = &unwantedAccess
	var unwantedAccessSensitivity string = "medium"
	this.UnwantedAccessSensitivity = &unwantedAccessSensitivity
	return &this
}

// GetCrossSiteScripting returns the CrossSiteScripting field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetCrossSiteScripting() bool {
	if o == nil || IsNil(o.CrossSiteScripting) {
		var ret bool
		return ret
	}
	return *o.CrossSiteScripting
}

// GetCrossSiteScriptingOk returns a tuple with the CrossSiteScripting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetCrossSiteScriptingOk() (*bool, bool) {
	if o == nil || IsNil(o.CrossSiteScripting) {
		return nil, false
	}
	return o.CrossSiteScripting, true
}

// HasCrossSiteScripting returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasCrossSiteScripting() bool {
	if o != nil && !IsNil(o.CrossSiteScripting) {
		return true
	}

	return false
}

// SetCrossSiteScripting gets a reference to the given bool and assigns it to the CrossSiteScripting field.
func (o *WAFThreatsConfiguration) SetCrossSiteScripting(v bool) {
	o.CrossSiteScripting = &v
}

// GetCrossSiteScriptingSensitivity returns the CrossSiteScriptingSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetCrossSiteScriptingSensitivity() string {
	if o == nil || IsNil(o.CrossSiteScriptingSensitivity) {
		var ret string
		return ret
	}
	return *o.CrossSiteScriptingSensitivity
}

// GetCrossSiteScriptingSensitivityOk returns a tuple with the CrossSiteScriptingSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetCrossSiteScriptingSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.CrossSiteScriptingSensitivity) {
		return nil, false
	}
	return o.CrossSiteScriptingSensitivity, true
}

// HasCrossSiteScriptingSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasCrossSiteScriptingSensitivity() bool {
	if o != nil && !IsNil(o.CrossSiteScriptingSensitivity) {
		return true
	}

	return false
}

// SetCrossSiteScriptingSensitivity gets a reference to the given string and assigns it to the CrossSiteScriptingSensitivity field.
func (o *WAFThreatsConfiguration) SetCrossSiteScriptingSensitivity(v string) {
	o.CrossSiteScriptingSensitivity = &v
}

// GetDirectoryTraversal returns the DirectoryTraversal field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetDirectoryTraversal() bool {
	if o == nil || IsNil(o.DirectoryTraversal) {
		var ret bool
		return ret
	}
	return *o.DirectoryTraversal
}

// GetDirectoryTraversalOk returns a tuple with the DirectoryTraversal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetDirectoryTraversalOk() (*bool, bool) {
	if o == nil || IsNil(o.DirectoryTraversal) {
		return nil, false
	}
	return o.DirectoryTraversal, true
}

// HasDirectoryTraversal returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasDirectoryTraversal() bool {
	if o != nil && !IsNil(o.DirectoryTraversal) {
		return true
	}

	return false
}

// SetDirectoryTraversal gets a reference to the given bool and assigns it to the DirectoryTraversal field.
func (o *WAFThreatsConfiguration) SetDirectoryTraversal(v bool) {
	o.DirectoryTraversal = &v
}

// GetDirectoryTraversalSensitivity returns the DirectoryTraversalSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetDirectoryTraversalSensitivity() string {
	if o == nil || IsNil(o.DirectoryTraversalSensitivity) {
		var ret string
		return ret
	}
	return *o.DirectoryTraversalSensitivity
}

// GetDirectoryTraversalSensitivityOk returns a tuple with the DirectoryTraversalSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetDirectoryTraversalSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryTraversalSensitivity) {
		return nil, false
	}
	return o.DirectoryTraversalSensitivity, true
}

// HasDirectoryTraversalSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasDirectoryTraversalSensitivity() bool {
	if o != nil && !IsNil(o.DirectoryTraversalSensitivity) {
		return true
	}

	return false
}

// SetDirectoryTraversalSensitivity gets a reference to the given string and assigns it to the DirectoryTraversalSensitivity field.
func (o *WAFThreatsConfiguration) SetDirectoryTraversalSensitivity(v string) {
	o.DirectoryTraversalSensitivity = &v
}

// GetEvadingTricks returns the EvadingTricks field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetEvadingTricks() bool {
	if o == nil || IsNil(o.EvadingTricks) {
		var ret bool
		return ret
	}
	return *o.EvadingTricks
}

// GetEvadingTricksOk returns a tuple with the EvadingTricks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetEvadingTricksOk() (*bool, bool) {
	if o == nil || IsNil(o.EvadingTricks) {
		return nil, false
	}
	return o.EvadingTricks, true
}

// HasEvadingTricks returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasEvadingTricks() bool {
	if o != nil && !IsNil(o.EvadingTricks) {
		return true
	}

	return false
}

// SetEvadingTricks gets a reference to the given bool and assigns it to the EvadingTricks field.
func (o *WAFThreatsConfiguration) SetEvadingTricks(v bool) {
	o.EvadingTricks = &v
}

// GetEvadingTricksSensitivity returns the EvadingTricksSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetEvadingTricksSensitivity() string {
	if o == nil || IsNil(o.EvadingTricksSensitivity) {
		var ret string
		return ret
	}
	return *o.EvadingTricksSensitivity
}

// GetEvadingTricksSensitivityOk returns a tuple with the EvadingTricksSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetEvadingTricksSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.EvadingTricksSensitivity) {
		return nil, false
	}
	return o.EvadingTricksSensitivity, true
}

// HasEvadingTricksSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasEvadingTricksSensitivity() bool {
	if o != nil && !IsNil(o.EvadingTricksSensitivity) {
		return true
	}

	return false
}

// SetEvadingTricksSensitivity gets a reference to the given string and assigns it to the EvadingTricksSensitivity field.
func (o *WAFThreatsConfiguration) SetEvadingTricksSensitivity(v string) {
	o.EvadingTricksSensitivity = &v
}

// GetFileUpload returns the FileUpload field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetFileUpload() bool {
	if o == nil || IsNil(o.FileUpload) {
		var ret bool
		return ret
	}
	return *o.FileUpload
}

// GetFileUploadOk returns a tuple with the FileUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetFileUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.FileUpload) {
		return nil, false
	}
	return o.FileUpload, true
}

// HasFileUpload returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasFileUpload() bool {
	if o != nil && !IsNil(o.FileUpload) {
		return true
	}

	return false
}

// SetFileUpload gets a reference to the given bool and assigns it to the FileUpload field.
func (o *WAFThreatsConfiguration) SetFileUpload(v bool) {
	o.FileUpload = &v
}

// GetFileUploadSensitivity returns the FileUploadSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetFileUploadSensitivity() string {
	if o == nil || IsNil(o.FileUploadSensitivity) {
		var ret string
		return ret
	}
	return *o.FileUploadSensitivity
}

// GetFileUploadSensitivityOk returns a tuple with the FileUploadSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetFileUploadSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.FileUploadSensitivity) {
		return nil, false
	}
	return o.FileUploadSensitivity, true
}

// HasFileUploadSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasFileUploadSensitivity() bool {
	if o != nil && !IsNil(o.FileUploadSensitivity) {
		return true
	}

	return false
}

// SetFileUploadSensitivity gets a reference to the given string and assigns it to the FileUploadSensitivity field.
func (o *WAFThreatsConfiguration) SetFileUploadSensitivity(v string) {
	o.FileUploadSensitivity = &v
}

// GetIdentifiedAttack returns the IdentifiedAttack field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetIdentifiedAttack() bool {
	if o == nil || IsNil(o.IdentifiedAttack) {
		var ret bool
		return ret
	}
	return *o.IdentifiedAttack
}

// GetIdentifiedAttackOk returns a tuple with the IdentifiedAttack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetIdentifiedAttackOk() (*bool, bool) {
	if o == nil || IsNil(o.IdentifiedAttack) {
		return nil, false
	}
	return o.IdentifiedAttack, true
}

// HasIdentifiedAttack returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasIdentifiedAttack() bool {
	if o != nil && !IsNil(o.IdentifiedAttack) {
		return true
	}

	return false
}

// SetIdentifiedAttack gets a reference to the given bool and assigns it to the IdentifiedAttack field.
func (o *WAFThreatsConfiguration) SetIdentifiedAttack(v bool) {
	o.IdentifiedAttack = &v
}

// GetIdentifiedAttackSensitivity returns the IdentifiedAttackSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetIdentifiedAttackSensitivity() string {
	if o == nil || IsNil(o.IdentifiedAttackSensitivity) {
		var ret string
		return ret
	}
	return *o.IdentifiedAttackSensitivity
}

// GetIdentifiedAttackSensitivityOk returns a tuple with the IdentifiedAttackSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetIdentifiedAttackSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifiedAttackSensitivity) {
		return nil, false
	}
	return o.IdentifiedAttackSensitivity, true
}

// HasIdentifiedAttackSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasIdentifiedAttackSensitivity() bool {
	if o != nil && !IsNil(o.IdentifiedAttackSensitivity) {
		return true
	}

	return false
}

// SetIdentifiedAttackSensitivity gets a reference to the given string and assigns it to the IdentifiedAttackSensitivity field.
func (o *WAFThreatsConfiguration) SetIdentifiedAttackSensitivity(v string) {
	o.IdentifiedAttackSensitivity = &v
}

// GetRemoteFileInclusion returns the RemoteFileInclusion field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetRemoteFileInclusion() bool {
	if o == nil || IsNil(o.RemoteFileInclusion) {
		var ret bool
		return ret
	}
	return *o.RemoteFileInclusion
}

// GetRemoteFileInclusionOk returns a tuple with the RemoteFileInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetRemoteFileInclusionOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteFileInclusion) {
		return nil, false
	}
	return o.RemoteFileInclusion, true
}

// HasRemoteFileInclusion returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasRemoteFileInclusion() bool {
	if o != nil && !IsNil(o.RemoteFileInclusion) {
		return true
	}

	return false
}

// SetRemoteFileInclusion gets a reference to the given bool and assigns it to the RemoteFileInclusion field.
func (o *WAFThreatsConfiguration) SetRemoteFileInclusion(v bool) {
	o.RemoteFileInclusion = &v
}

// GetRemoteFileInclusionSensitivity returns the RemoteFileInclusionSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetRemoteFileInclusionSensitivity() string {
	if o == nil || IsNil(o.RemoteFileInclusionSensitivity) {
		var ret string
		return ret
	}
	return *o.RemoteFileInclusionSensitivity
}

// GetRemoteFileInclusionSensitivityOk returns a tuple with the RemoteFileInclusionSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetRemoteFileInclusionSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteFileInclusionSensitivity) {
		return nil, false
	}
	return o.RemoteFileInclusionSensitivity, true
}

// HasRemoteFileInclusionSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasRemoteFileInclusionSensitivity() bool {
	if o != nil && !IsNil(o.RemoteFileInclusionSensitivity) {
		return true
	}

	return false
}

// SetRemoteFileInclusionSensitivity gets a reference to the given string and assigns it to the RemoteFileInclusionSensitivity field.
func (o *WAFThreatsConfiguration) SetRemoteFileInclusionSensitivity(v string) {
	o.RemoteFileInclusionSensitivity = &v
}

// GetSqlInjection returns the SqlInjection field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetSqlInjection() bool {
	if o == nil || IsNil(o.SqlInjection) {
		var ret bool
		return ret
	}
	return *o.SqlInjection
}

// GetSqlInjectionOk returns a tuple with the SqlInjection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetSqlInjectionOk() (*bool, bool) {
	if o == nil || IsNil(o.SqlInjection) {
		return nil, false
	}
	return o.SqlInjection, true
}

// HasSqlInjection returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasSqlInjection() bool {
	if o != nil && !IsNil(o.SqlInjection) {
		return true
	}

	return false
}

// SetSqlInjection gets a reference to the given bool and assigns it to the SqlInjection field.
func (o *WAFThreatsConfiguration) SetSqlInjection(v bool) {
	o.SqlInjection = &v
}

// GetSqlInjectionSensitivity returns the SqlInjectionSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetSqlInjectionSensitivity() string {
	if o == nil || IsNil(o.SqlInjectionSensitivity) {
		var ret string
		return ret
	}
	return *o.SqlInjectionSensitivity
}

// GetSqlInjectionSensitivityOk returns a tuple with the SqlInjectionSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetSqlInjectionSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.SqlInjectionSensitivity) {
		return nil, false
	}
	return o.SqlInjectionSensitivity, true
}

// HasSqlInjectionSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasSqlInjectionSensitivity() bool {
	if o != nil && !IsNil(o.SqlInjectionSensitivity) {
		return true
	}

	return false
}

// SetSqlInjectionSensitivity gets a reference to the given string and assigns it to the SqlInjectionSensitivity field.
func (o *WAFThreatsConfiguration) SetSqlInjectionSensitivity(v string) {
	o.SqlInjectionSensitivity = &v
}

// GetUnwantedAccess returns the UnwantedAccess field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetUnwantedAccess() bool {
	if o == nil || IsNil(o.UnwantedAccess) {
		var ret bool
		return ret
	}
	return *o.UnwantedAccess
}

// GetUnwantedAccessOk returns a tuple with the UnwantedAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetUnwantedAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.UnwantedAccess) {
		return nil, false
	}
	return o.UnwantedAccess, true
}

// HasUnwantedAccess returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasUnwantedAccess() bool {
	if o != nil && !IsNil(o.UnwantedAccess) {
		return true
	}

	return false
}

// SetUnwantedAccess gets a reference to the given bool and assigns it to the UnwantedAccess field.
func (o *WAFThreatsConfiguration) SetUnwantedAccess(v bool) {
	o.UnwantedAccess = &v
}

// GetUnwantedAccessSensitivity returns the UnwantedAccessSensitivity field value if set, zero value otherwise.
func (o *WAFThreatsConfiguration) GetUnwantedAccessSensitivity() string {
	if o == nil || IsNil(o.UnwantedAccessSensitivity) {
		var ret string
		return ret
	}
	return *o.UnwantedAccessSensitivity
}

// GetUnwantedAccessSensitivityOk returns a tuple with the UnwantedAccessSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WAFThreatsConfiguration) GetUnwantedAccessSensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.UnwantedAccessSensitivity) {
		return nil, false
	}
	return o.UnwantedAccessSensitivity, true
}

// HasUnwantedAccessSensitivity returns a boolean if a field has been set.
func (o *WAFThreatsConfiguration) HasUnwantedAccessSensitivity() bool {
	if o != nil && !IsNil(o.UnwantedAccessSensitivity) {
		return true
	}

	return false
}

// SetUnwantedAccessSensitivity gets a reference to the given string and assigns it to the UnwantedAccessSensitivity field.
func (o *WAFThreatsConfiguration) SetUnwantedAccessSensitivity(v string) {
	o.UnwantedAccessSensitivity = &v
}

func (o WAFThreatsConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WAFThreatsConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CrossSiteScripting) {
		toSerialize["cross_site_scripting"] = o.CrossSiteScripting
	}
	if !IsNil(o.CrossSiteScriptingSensitivity) {
		toSerialize["cross_site_scripting_sensitivity"] = o.CrossSiteScriptingSensitivity
	}
	if !IsNil(o.DirectoryTraversal) {
		toSerialize["directory_traversal"] = o.DirectoryTraversal
	}
	if !IsNil(o.DirectoryTraversalSensitivity) {
		toSerialize["directory_traversal_sensitivity"] = o.DirectoryTraversalSensitivity
	}
	if !IsNil(o.EvadingTricks) {
		toSerialize["evading_tricks"] = o.EvadingTricks
	}
	if !IsNil(o.EvadingTricksSensitivity) {
		toSerialize["evading_tricks_sensitivity"] = o.EvadingTricksSensitivity
	}
	if !IsNil(o.FileUpload) {
		toSerialize["file_upload"] = o.FileUpload
	}
	if !IsNil(o.FileUploadSensitivity) {
		toSerialize["file_upload_sensitivity"] = o.FileUploadSensitivity
	}
	if !IsNil(o.IdentifiedAttack) {
		toSerialize["identified_attack"] = o.IdentifiedAttack
	}
	if !IsNil(o.IdentifiedAttackSensitivity) {
		toSerialize["identified_attack_sensitivity"] = o.IdentifiedAttackSensitivity
	}
	if !IsNil(o.RemoteFileInclusion) {
		toSerialize["remote_file_inclusion"] = o.RemoteFileInclusion
	}
	if !IsNil(o.RemoteFileInclusionSensitivity) {
		toSerialize["remote_file_inclusion_sensitivity"] = o.RemoteFileInclusionSensitivity
	}
	if !IsNil(o.SqlInjection) {
		toSerialize["sql_injection"] = o.SqlInjection
	}
	if !IsNil(o.SqlInjectionSensitivity) {
		toSerialize["sql_injection_sensitivity"] = o.SqlInjectionSensitivity
	}
	if !IsNil(o.UnwantedAccess) {
		toSerialize["unwanted_access"] = o.UnwantedAccess
	}
	if !IsNil(o.UnwantedAccessSensitivity) {
		toSerialize["unwanted_access_sensitivity"] = o.UnwantedAccessSensitivity
	}
	return toSerialize, nil
}

type NullableWAFThreatsConfiguration struct {
	value *WAFThreatsConfiguration
	isSet bool
}

func (v NullableWAFThreatsConfiguration) Get() *WAFThreatsConfiguration {
	return v.value
}

func (v *NullableWAFThreatsConfiguration) Set(val *WAFThreatsConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableWAFThreatsConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableWAFThreatsConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWAFThreatsConfiguration(val *WAFThreatsConfiguration) *NullableWAFThreatsConfiguration {
	return &NullableWAFThreatsConfiguration{value: val, isSet: true}
}

func (v NullableWAFThreatsConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWAFThreatsConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


