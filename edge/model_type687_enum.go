/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
)

// checks if the Type687Enum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Type687Enum{}

// Type687Enum * `asn` - ASN * `countries` - Countries * `ip_cidr` - IP/CIDR
type Type687Enum struct {
}

// NewType687Enum instantiates a new Type687Enum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewType687Enum() *Type687Enum {
	this := Type687Enum{}
	return &this
}

// NewType687EnumWithDefaults instantiates a new Type687Enum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewType687EnumWithDefaults() *Type687Enum {
	this := Type687Enum{}
	return &this
}

func (o Type687Enum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Type687Enum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableType687Enum struct {
	value Type687Enum
	isSet bool
}

func (v NullableType687Enum) Get() Type687Enum {
	return v.value
}

func (v *NullableType687Enum) Set(val Type687Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableType687Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableType687Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType687Enum(val Type687Enum) *NullableType687Enum {
	return &NullableType687Enum{value: val, isSet: true}
}

func (v NullableType687Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType687Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


