/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DomainInfoRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainInfoRequest{}

// DomainInfoRequest struct for DomainInfoRequest
type DomainInfoRequest struct {
	Domain NullableString `json:"domain,omitempty" validate:"regexp=.*"`
	AllowAccess bool `json:"allow_access"`
}

type _DomainInfoRequest DomainInfoRequest

// NewDomainInfoRequest instantiates a new DomainInfoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainInfoRequest(allowAccess bool) *DomainInfoRequest {
	this := DomainInfoRequest{}
	this.AllowAccess = allowAccess
	return &this
}

// NewDomainInfoRequestWithDefaults instantiates a new DomainInfoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainInfoRequestWithDefaults() *DomainInfoRequest {
	this := DomainInfoRequest{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DomainInfoRequest) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DomainInfoRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *DomainInfoRequest) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *DomainInfoRequest) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *DomainInfoRequest) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *DomainInfoRequest) UnsetDomain() {
	o.Domain.Unset()
}

// GetAllowAccess returns the AllowAccess field value
func (o *DomainInfoRequest) GetAllowAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowAccess
}

// GetAllowAccessOk returns a tuple with the AllowAccess field value
// and a boolean to check if the value has been set.
func (o *DomainInfoRequest) GetAllowAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowAccess, true
}

// SetAllowAccess sets field value
func (o *DomainInfoRequest) SetAllowAccess(v bool) {
	o.AllowAccess = v
}

func (o DomainInfoRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainInfoRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	toSerialize["allow_access"] = o.AllowAccess
	return toSerialize, nil
}

func (o *DomainInfoRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allow_access",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomainInfoRequest := _DomainInfoRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDomainInfoRequest)

	if err != nil {
		return err
	}

	*o = DomainInfoRequest(varDomainInfoRequest)

	return err
}

type NullableDomainInfoRequest struct {
	value *DomainInfoRequest
	isSet bool
}

func (v NullableDomainInfoRequest) Get() *DomainInfoRequest {
	return v.value
}

func (v *NullableDomainInfoRequest) Set(val *DomainInfoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainInfoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainInfoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainInfoRequest(val *DomainInfoRequest) *NullableDomainInfoRequest {
	return &NullableDomainInfoRequest{value: val, isSet: true}
}

func (v NullableDomainInfoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainInfoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


