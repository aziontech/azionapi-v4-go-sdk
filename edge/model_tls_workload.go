/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
)

// checks if the TLSWorkload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TLSWorkload{}

// TLSWorkload struct for TLSWorkload
type TLSWorkload struct {
	Certificate NullableInt64 `json:"certificate,omitempty"`
	Ciphers NullableTLSWorkloadCiphers `json:"ciphers,omitempty"`
	MinimumVersion NullableTLSWorkloadMinimumVersion `json:"minimum_version,omitempty"`
}

// NewTLSWorkload instantiates a new TLSWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLSWorkload() *TLSWorkload {
	this := TLSWorkload{}
	return &this
}

// NewTLSWorkloadWithDefaults instantiates a new TLSWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSWorkloadWithDefaults() *TLSWorkload {
	this := TLSWorkload{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TLSWorkload) GetCertificate() int64 {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret int64
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TLSWorkload) GetCertificateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *TLSWorkload) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableInt64 and assigns it to the Certificate field.
func (o *TLSWorkload) SetCertificate(v int64) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *TLSWorkload) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *TLSWorkload) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetCiphers returns the Ciphers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TLSWorkload) GetCiphers() TLSWorkloadCiphers {
	if o == nil || IsNil(o.Ciphers.Get()) {
		var ret TLSWorkloadCiphers
		return ret
	}
	return *o.Ciphers.Get()
}

// GetCiphersOk returns a tuple with the Ciphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TLSWorkload) GetCiphersOk() (*TLSWorkloadCiphers, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ciphers.Get(), o.Ciphers.IsSet()
}

// HasCiphers returns a boolean if a field has been set.
func (o *TLSWorkload) HasCiphers() bool {
	if o != nil && o.Ciphers.IsSet() {
		return true
	}

	return false
}

// SetCiphers gets a reference to the given NullableTLSWorkloadCiphers and assigns it to the Ciphers field.
func (o *TLSWorkload) SetCiphers(v TLSWorkloadCiphers) {
	o.Ciphers.Set(&v)
}
// SetCiphersNil sets the value for Ciphers to be an explicit nil
func (o *TLSWorkload) SetCiphersNil() {
	o.Ciphers.Set(nil)
}

// UnsetCiphers ensures that no value is present for Ciphers, not even an explicit nil
func (o *TLSWorkload) UnsetCiphers() {
	o.Ciphers.Unset()
}

// GetMinimumVersion returns the MinimumVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TLSWorkload) GetMinimumVersion() TLSWorkloadMinimumVersion {
	if o == nil || IsNil(o.MinimumVersion.Get()) {
		var ret TLSWorkloadMinimumVersion
		return ret
	}
	return *o.MinimumVersion.Get()
}

// GetMinimumVersionOk returns a tuple with the MinimumVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TLSWorkload) GetMinimumVersionOk() (*TLSWorkloadMinimumVersion, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumVersion.Get(), o.MinimumVersion.IsSet()
}

// HasMinimumVersion returns a boolean if a field has been set.
func (o *TLSWorkload) HasMinimumVersion() bool {
	if o != nil && o.MinimumVersion.IsSet() {
		return true
	}

	return false
}

// SetMinimumVersion gets a reference to the given NullableTLSWorkloadMinimumVersion and assigns it to the MinimumVersion field.
func (o *TLSWorkload) SetMinimumVersion(v TLSWorkloadMinimumVersion) {
	o.MinimumVersion.Set(&v)
}
// SetMinimumVersionNil sets the value for MinimumVersion to be an explicit nil
func (o *TLSWorkload) SetMinimumVersionNil() {
	o.MinimumVersion.Set(nil)
}

// UnsetMinimumVersion ensures that no value is present for MinimumVersion, not even an explicit nil
func (o *TLSWorkload) UnsetMinimumVersion() {
	o.MinimumVersion.Unset()
}

func (o TLSWorkload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TLSWorkload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.Ciphers.IsSet() {
		toSerialize["ciphers"] = o.Ciphers.Get()
	}
	if o.MinimumVersion.IsSet() {
		toSerialize["minimum_version"] = o.MinimumVersion.Get()
	}
	return toSerialize, nil
}

type NullableTLSWorkload struct {
	value *TLSWorkload
	isSet bool
}

func (v NullableTLSWorkload) Get() *TLSWorkload {
	return v.value
}

func (v *NullableTLSWorkload) Set(val *TLSWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableTLSWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableTLSWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLSWorkload(val *TLSWorkload) *NullableTLSWorkload {
	return &NullableTLSWorkload{value: val, isSet: true}
}

func (v NullableTLSWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLSWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


