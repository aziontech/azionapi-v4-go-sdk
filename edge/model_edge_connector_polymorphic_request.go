/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EdgeConnectorPolymorphicRequest - struct for EdgeConnectorPolymorphicRequest
type EdgeConnectorPolymorphicRequest struct {
	EdgeConnectorHTTPTypedRequest *EdgeConnectorHTTPTypedRequest
	EdgeConnectorLiveIngestTypedRequest *EdgeConnectorLiveIngestTypedRequest
	EdgeConnectorS3TypedRequest *EdgeConnectorS3TypedRequest
	EdgeConnectorStorageTypedRequest *EdgeConnectorStorageTypedRequest
}

// EdgeConnectorHTTPTypedRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorHTTPTypedRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorHTTPTypedRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorHTTPTypedRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorHTTPTypedRequest: v,
	}
}

// EdgeConnectorLiveIngestTypedRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorLiveIngestTypedRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorLiveIngestTypedRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorLiveIngestTypedRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorLiveIngestTypedRequest: v,
	}
}

// EdgeConnectorS3TypedRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorS3TypedRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorS3TypedRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorS3TypedRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorS3TypedRequest: v,
	}
}

// EdgeConnectorStorageTypedRequestAsEdgeConnectorPolymorphicRequest is a convenience function that returns EdgeConnectorStorageTypedRequest wrapped in EdgeConnectorPolymorphicRequest
func EdgeConnectorStorageTypedRequestAsEdgeConnectorPolymorphicRequest(v *EdgeConnectorStorageTypedRequest) EdgeConnectorPolymorphicRequest {
	return EdgeConnectorPolymorphicRequest{
		EdgeConnectorStorageTypedRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EdgeConnectorPolymorphicRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EdgeConnectorHTTPTypedRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorHTTPTypedRequest)
	if err == nil {
		jsonEdgeConnectorHTTPTypedRequest, _ := json.Marshal(dst.EdgeConnectorHTTPTypedRequest)
		if string(jsonEdgeConnectorHTTPTypedRequest) == "{}" { // empty struct
			dst.EdgeConnectorHTTPTypedRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorHTTPTypedRequest); err != nil {
				dst.EdgeConnectorHTTPTypedRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorHTTPTypedRequest = nil
	}

	// try to unmarshal data into EdgeConnectorLiveIngestTypedRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorLiveIngestTypedRequest)
	if err == nil {
		jsonEdgeConnectorLiveIngestTypedRequest, _ := json.Marshal(dst.EdgeConnectorLiveIngestTypedRequest)
		if string(jsonEdgeConnectorLiveIngestTypedRequest) == "{}" { // empty struct
			dst.EdgeConnectorLiveIngestTypedRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorLiveIngestTypedRequest); err != nil {
				dst.EdgeConnectorLiveIngestTypedRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorLiveIngestTypedRequest = nil
	}

	// try to unmarshal data into EdgeConnectorS3TypedRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorS3TypedRequest)
	if err == nil {
		jsonEdgeConnectorS3TypedRequest, _ := json.Marshal(dst.EdgeConnectorS3TypedRequest)
		if string(jsonEdgeConnectorS3TypedRequest) == "{}" { // empty struct
			dst.EdgeConnectorS3TypedRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorS3TypedRequest); err != nil {
				dst.EdgeConnectorS3TypedRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorS3TypedRequest = nil
	}

	// try to unmarshal data into EdgeConnectorStorageTypedRequest
	err = newStrictDecoder(data).Decode(&dst.EdgeConnectorStorageTypedRequest)
	if err == nil {
		jsonEdgeConnectorStorageTypedRequest, _ := json.Marshal(dst.EdgeConnectorStorageTypedRequest)
		if string(jsonEdgeConnectorStorageTypedRequest) == "{}" { // empty struct
			dst.EdgeConnectorStorageTypedRequest = nil
		} else {
			if err = validator.Validate(dst.EdgeConnectorStorageTypedRequest); err != nil {
				dst.EdgeConnectorStorageTypedRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.EdgeConnectorStorageTypedRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EdgeConnectorHTTPTypedRequest = nil
		dst.EdgeConnectorLiveIngestTypedRequest = nil
		dst.EdgeConnectorS3TypedRequest = nil
		dst.EdgeConnectorStorageTypedRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EdgeConnectorPolymorphicRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EdgeConnectorPolymorphicRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EdgeConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	if src.EdgeConnectorHTTPTypedRequest != nil {
		return json.Marshal(&src.EdgeConnectorHTTPTypedRequest)
	}

	if src.EdgeConnectorLiveIngestTypedRequest != nil {
		return json.Marshal(&src.EdgeConnectorLiveIngestTypedRequest)
	}

	if src.EdgeConnectorS3TypedRequest != nil {
		return json.Marshal(&src.EdgeConnectorS3TypedRequest)
	}

	if src.EdgeConnectorStorageTypedRequest != nil {
		return json.Marshal(&src.EdgeConnectorStorageTypedRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EdgeConnectorPolymorphicRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EdgeConnectorHTTPTypedRequest != nil {
		return obj.EdgeConnectorHTTPTypedRequest
	}

	if obj.EdgeConnectorLiveIngestTypedRequest != nil {
		return obj.EdgeConnectorLiveIngestTypedRequest
	}

	if obj.EdgeConnectorS3TypedRequest != nil {
		return obj.EdgeConnectorS3TypedRequest
	}

	if obj.EdgeConnectorStorageTypedRequest != nil {
		return obj.EdgeConnectorStorageTypedRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EdgeConnectorPolymorphicRequest) GetActualInstanceValue() (interface{}) {
	if obj.EdgeConnectorHTTPTypedRequest != nil {
		return *obj.EdgeConnectorHTTPTypedRequest
	}

	if obj.EdgeConnectorLiveIngestTypedRequest != nil {
		return *obj.EdgeConnectorLiveIngestTypedRequest
	}

	if obj.EdgeConnectorS3TypedRequest != nil {
		return *obj.EdgeConnectorS3TypedRequest
	}

	if obj.EdgeConnectorStorageTypedRequest != nil {
		return *obj.EdgeConnectorStorageTypedRequest
	}

	// all schemas are nil
	return nil
}

type NullableEdgeConnectorPolymorphicRequest struct {
	value *EdgeConnectorPolymorphicRequest
	isSet bool
}

func (v NullableEdgeConnectorPolymorphicRequest) Get() *EdgeConnectorPolymorphicRequest {
	return v.value
}

func (v *NullableEdgeConnectorPolymorphicRequest) Set(val *EdgeConnectorPolymorphicRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEdgeConnectorPolymorphicRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEdgeConnectorPolymorphicRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdgeConnectorPolymorphicRequest(val *EdgeConnectorPolymorphicRequest) *NullableEdgeConnectorPolymorphicRequest {
	return &NullableEdgeConnectorPolymorphicRequest{value: val, isSet: true}
}

func (v NullableEdgeConnectorPolymorphicRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdgeConnectorPolymorphicRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


