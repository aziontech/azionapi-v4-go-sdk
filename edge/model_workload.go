/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Workload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workload{}

// Workload struct for Workload
type Workload struct {
	Id int64 `json:"id"`
	Name string `json:"name" validate:"regexp=.*"`
	AlternateDomains []string `json:"alternate_domains,omitempty"`
	Active *bool `json:"active,omitempty"`
	// * `1` - Edge Global Network * `2` - Staging Network
	NetworkMap *string `json:"network_map,omitempty"`
	LastEditor string `json:"last_editor" validate:"regexp=.*"`
	LastModified time.Time `json:"last_modified"`
	Tls *TLSWorkload `json:"tls,omitempty"`
	Protocols *Protocols `json:"protocols,omitempty"`
	Mtls *MTLS `json:"mtls,omitempty"`
	Domains []DomainInfo `json:"domains,omitempty"`
	ProductVersion string `json:"product_version" validate:"regexp=^(custom|\\\\d+\\\\.\\\\d+)$"`
}

type _Workload Workload

// NewWorkload instantiates a new Workload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkload(id int64, name string, lastEditor string, lastModified time.Time, productVersion string) *Workload {
	this := Workload{}
	this.Id = id
	this.Name = name
	this.LastEditor = lastEditor
	this.LastModified = lastModified
	this.ProductVersion = productVersion
	return &this
}

// NewWorkloadWithDefaults instantiates a new Workload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWithDefaults() *Workload {
	this := Workload{}
	return &this
}

// GetId returns the Id field value
func (o *Workload) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Workload) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Workload) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Workload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Workload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Workload) SetName(v string) {
	o.Name = v
}

// GetAlternateDomains returns the AlternateDomains field value if set, zero value otherwise.
func (o *Workload) GetAlternateDomains() []string {
	if o == nil || IsNil(o.AlternateDomains) {
		var ret []string
		return ret
	}
	return o.AlternateDomains
}

// GetAlternateDomainsOk returns a tuple with the AlternateDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetAlternateDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlternateDomains) {
		return nil, false
	}
	return o.AlternateDomains, true
}

// HasAlternateDomains returns a boolean if a field has been set.
func (o *Workload) HasAlternateDomains() bool {
	if o != nil && !IsNil(o.AlternateDomains) {
		return true
	}

	return false
}

// SetAlternateDomains gets a reference to the given []string and assigns it to the AlternateDomains field.
func (o *Workload) SetAlternateDomains(v []string) {
	o.AlternateDomains = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Workload) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Workload) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Workload) SetActive(v bool) {
	o.Active = &v
}

// GetNetworkMap returns the NetworkMap field value if set, zero value otherwise.
func (o *Workload) GetNetworkMap() string {
	if o == nil || IsNil(o.NetworkMap) {
		var ret string
		return ret
	}
	return *o.NetworkMap
}

// GetNetworkMapOk returns a tuple with the NetworkMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetNetworkMapOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkMap) {
		return nil, false
	}
	return o.NetworkMap, true
}

// HasNetworkMap returns a boolean if a field has been set.
func (o *Workload) HasNetworkMap() bool {
	if o != nil && !IsNil(o.NetworkMap) {
		return true
	}

	return false
}

// SetNetworkMap gets a reference to the given string and assigns it to the NetworkMap field.
func (o *Workload) SetNetworkMap(v string) {
	o.NetworkMap = &v
}

// GetLastEditor returns the LastEditor field value
func (o *Workload) GetLastEditor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastEditor
}

// GetLastEditorOk returns a tuple with the LastEditor field value
// and a boolean to check if the value has been set.
func (o *Workload) GetLastEditorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEditor, true
}

// SetLastEditor sets field value
func (o *Workload) SetLastEditor(v string) {
	o.LastEditor = v
}

// GetLastModified returns the LastModified field value
func (o *Workload) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *Workload) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *Workload) SetLastModified(v time.Time) {
	o.LastModified = v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *Workload) GetTls() TLSWorkload {
	if o == nil || IsNil(o.Tls) {
		var ret TLSWorkload
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetTlsOk() (*TLSWorkload, bool) {
	if o == nil || IsNil(o.Tls) {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *Workload) HasTls() bool {
	if o != nil && !IsNil(o.Tls) {
		return true
	}

	return false
}

// SetTls gets a reference to the given TLSWorkload and assigns it to the Tls field.
func (o *Workload) SetTls(v TLSWorkload) {
	o.Tls = &v
}

// GetProtocols returns the Protocols field value if set, zero value otherwise.
func (o *Workload) GetProtocols() Protocols {
	if o == nil || IsNil(o.Protocols) {
		var ret Protocols
		return ret
	}
	return *o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetProtocolsOk() (*Protocols, bool) {
	if o == nil || IsNil(o.Protocols) {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *Workload) HasProtocols() bool {
	if o != nil && !IsNil(o.Protocols) {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given Protocols and assigns it to the Protocols field.
func (o *Workload) SetProtocols(v Protocols) {
	o.Protocols = &v
}

// GetMtls returns the Mtls field value if set, zero value otherwise.
func (o *Workload) GetMtls() MTLS {
	if o == nil || IsNil(o.Mtls) {
		var ret MTLS
		return ret
	}
	return *o.Mtls
}

// GetMtlsOk returns a tuple with the Mtls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetMtlsOk() (*MTLS, bool) {
	if o == nil || IsNil(o.Mtls) {
		return nil, false
	}
	return o.Mtls, true
}

// HasMtls returns a boolean if a field has been set.
func (o *Workload) HasMtls() bool {
	if o != nil && !IsNil(o.Mtls) {
		return true
	}

	return false
}

// SetMtls gets a reference to the given MTLS and assigns it to the Mtls field.
func (o *Workload) SetMtls(v MTLS) {
	o.Mtls = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *Workload) GetDomains() []DomainInfo {
	if o == nil || IsNil(o.Domains) {
		var ret []DomainInfo
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetDomainsOk() ([]DomainInfo, bool) {
	if o == nil || IsNil(o.Domains) {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *Workload) HasDomains() bool {
	if o != nil && !IsNil(o.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []DomainInfo and assigns it to the Domains field.
func (o *Workload) SetDomains(v []DomainInfo) {
	o.Domains = v
}

// GetProductVersion returns the ProductVersion field value
func (o *Workload) GetProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value
// and a boolean to check if the value has been set.
func (o *Workload) GetProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductVersion, true
}

// SetProductVersion sets field value
func (o *Workload) SetProductVersion(v string) {
	o.ProductVersion = v
}

func (o Workload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.AlternateDomains) {
		toSerialize["alternate_domains"] = o.AlternateDomains
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.NetworkMap) {
		toSerialize["network_map"] = o.NetworkMap
	}
	toSerialize["last_editor"] = o.LastEditor
	toSerialize["last_modified"] = o.LastModified
	if !IsNil(o.Tls) {
		toSerialize["tls"] = o.Tls
	}
	if !IsNil(o.Protocols) {
		toSerialize["protocols"] = o.Protocols
	}
	if !IsNil(o.Mtls) {
		toSerialize["mtls"] = o.Mtls
	}
	if !IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	toSerialize["product_version"] = o.ProductVersion
	return toSerialize, nil
}

func (o *Workload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"last_editor",
		"last_modified",
		"product_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkload := _Workload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkload)

	if err != nil {
		return err
	}

	*o = Workload(varWorkload)

	return err
}

type NullableWorkload struct {
	value *Workload
	isSet bool
}

func (v NullableWorkload) Get() *Workload {
	return v.value
}

func (v *NullableWorkload) Set(val *Workload) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkload(val *Workload) *NullableWorkload {
	return &NullableWorkload{value: val, isSet: true}
}

func (v NullableWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


