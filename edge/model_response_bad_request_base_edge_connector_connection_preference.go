/*
edge-api

REST API OpenAPI documentation for the edge-api

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edge

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ResponseBadRequestBaseEdgeConnectorConnectionPreference - struct for ResponseBadRequestBaseEdgeConnectorConnectionPreference
type ResponseBadRequestBaseEdgeConnectorConnectionPreference struct {
	ArrayOfString *[]string
	MapmapOfStringarrayOfString *map[string][]string
}

// []stringAsResponseBadRequestBaseEdgeConnectorConnectionPreference is a convenience function that returns []string wrapped in ResponseBadRequestBaseEdgeConnectorConnectionPreference
func ArrayOfStringAsResponseBadRequestBaseEdgeConnectorConnectionPreference(v *[]string) ResponseBadRequestBaseEdgeConnectorConnectionPreference {
	return ResponseBadRequestBaseEdgeConnectorConnectionPreference{
		ArrayOfString: v,
	}
}

// map[string][]stringAsResponseBadRequestBaseEdgeConnectorConnectionPreference is a convenience function that returns map[string][]string wrapped in ResponseBadRequestBaseEdgeConnectorConnectionPreference
func MapmapOfStringarrayOfStringAsResponseBadRequestBaseEdgeConnectorConnectionPreference(v *map[string][]string) ResponseBadRequestBaseEdgeConnectorConnectionPreference {
	return ResponseBadRequestBaseEdgeConnectorConnectionPreference{
		MapmapOfStringarrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseBadRequestBaseEdgeConnectorConnectionPreference) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into MapmapOfStringarrayOfString
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringarrayOfString)
	if err == nil {
		jsonMapmapOfStringarrayOfString, _ := json.Marshal(dst.MapmapOfStringarrayOfString)
		if string(jsonMapmapOfStringarrayOfString) == "{}" { // empty struct
			dst.MapmapOfStringarrayOfString = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringarrayOfString); err != nil {
				dst.MapmapOfStringarrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringarrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.MapmapOfStringarrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseBadRequestBaseEdgeConnectorConnectionPreference)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseBadRequestBaseEdgeConnectorConnectionPreference)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseBadRequestBaseEdgeConnectorConnectionPreference) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.MapmapOfStringarrayOfString != nil {
		return json.Marshal(&src.MapmapOfStringarrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseBadRequestBaseEdgeConnectorConnectionPreference) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.MapmapOfStringarrayOfString != nil {
		return obj.MapmapOfStringarrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ResponseBadRequestBaseEdgeConnectorConnectionPreference) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	if obj.MapmapOfStringarrayOfString != nil {
		return *obj.MapmapOfStringarrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableResponseBadRequestBaseEdgeConnectorConnectionPreference struct {
	value *ResponseBadRequestBaseEdgeConnectorConnectionPreference
	isSet bool
}

func (v NullableResponseBadRequestBaseEdgeConnectorConnectionPreference) Get() *ResponseBadRequestBaseEdgeConnectorConnectionPreference {
	return v.value
}

func (v *NullableResponseBadRequestBaseEdgeConnectorConnectionPreference) Set(val *ResponseBadRequestBaseEdgeConnectorConnectionPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestBaseEdgeConnectorConnectionPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestBaseEdgeConnectorConnectionPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestBaseEdgeConnectorConnectionPreference(val *ResponseBadRequestBaseEdgeConnectorConnectionPreference) *NullableResponseBadRequestBaseEdgeConnectorConnectionPreference {
	return &NullableResponseBadRequestBaseEdgeConnectorConnectionPreference{value: val, isSet: true}
}

func (v NullableResponseBadRequestBaseEdgeConnectorConnectionPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestBaseEdgeConnectorConnectionPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


