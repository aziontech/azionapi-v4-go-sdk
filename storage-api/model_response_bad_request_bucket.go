/*
object-storage-api

REST API OpenAPI documentation for the Object Storage

API version: 1.0.0 (v1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage-api

import (
	"encoding/json"
)

// checks if the ResponseBadRequestBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseBadRequestBucket{}

// ResponseBadRequestBucket struct for ResponseBadRequestBucket
type ResponseBadRequestBucket struct {
	Name []string `json:"name,omitempty"`
	EdgeAccess []string `json:"edge_access,omitempty"`
	Detail *string `json:"detail,omitempty" validate:"regexp=.*"`
}

// NewResponseBadRequestBucket instantiates a new ResponseBadRequestBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseBadRequestBucket() *ResponseBadRequestBucket {
	this := ResponseBadRequestBucket{}
	return &this
}

// NewResponseBadRequestBucketWithDefaults instantiates a new ResponseBadRequestBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseBadRequestBucketWithDefaults() *ResponseBadRequestBucket {
	this := ResponseBadRequestBucket{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseBadRequestBucket) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestBucket) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseBadRequestBucket) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *ResponseBadRequestBucket) SetName(v []string) {
	o.Name = v
}

// GetEdgeAccess returns the EdgeAccess field value if set, zero value otherwise.
func (o *ResponseBadRequestBucket) GetEdgeAccess() []string {
	if o == nil || IsNil(o.EdgeAccess) {
		var ret []string
		return ret
	}
	return o.EdgeAccess
}

// GetEdgeAccessOk returns a tuple with the EdgeAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestBucket) GetEdgeAccessOk() ([]string, bool) {
	if o == nil || IsNil(o.EdgeAccess) {
		return nil, false
	}
	return o.EdgeAccess, true
}

// HasEdgeAccess returns a boolean if a field has been set.
func (o *ResponseBadRequestBucket) HasEdgeAccess() bool {
	if o != nil && !IsNil(o.EdgeAccess) {
		return true
	}

	return false
}

// SetEdgeAccess gets a reference to the given []string and assigns it to the EdgeAccess field.
func (o *ResponseBadRequestBucket) SetEdgeAccess(v []string) {
	o.EdgeAccess = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ResponseBadRequestBucket) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseBadRequestBucket) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ResponseBadRequestBucket) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ResponseBadRequestBucket) SetDetail(v string) {
	o.Detail = &v
}

func (o ResponseBadRequestBucket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseBadRequestBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EdgeAccess) {
		toSerialize["edge_access"] = o.EdgeAccess
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	return toSerialize, nil
}

type NullableResponseBadRequestBucket struct {
	value *ResponseBadRequestBucket
	isSet bool
}

func (v NullableResponseBadRequestBucket) Get() *ResponseBadRequestBucket {
	return v.value
}

func (v *NullableResponseBadRequestBucket) Set(val *ResponseBadRequestBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseBadRequestBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseBadRequestBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseBadRequestBucket(val *ResponseBadRequestBucket) *NullableResponseBadRequestBucket {
	return &NullableResponseBadRequestBucket{value: val, isSet: true}
}

func (v NullableResponseBadRequestBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseBadRequestBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


