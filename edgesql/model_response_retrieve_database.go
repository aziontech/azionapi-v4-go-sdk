/*
edgesql-api

REST API OpenAPI documentation for the EdgeSQL API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgesql

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResponseRetrieveDatabase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseRetrieveDatabase{}

// ResponseRetrieveDatabase struct for ResponseRetrieveDatabase
type ResponseRetrieveDatabase struct {
	Data Database `json:"data"`
}

type _ResponseRetrieveDatabase ResponseRetrieveDatabase

// NewResponseRetrieveDatabase instantiates a new ResponseRetrieveDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseRetrieveDatabase(data Database) *ResponseRetrieveDatabase {
	this := ResponseRetrieveDatabase{}
	this.Data = data
	return &this
}

// NewResponseRetrieveDatabaseWithDefaults instantiates a new ResponseRetrieveDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseRetrieveDatabaseWithDefaults() *ResponseRetrieveDatabase {
	this := ResponseRetrieveDatabase{}
	return &this
}

// GetData returns the Data field value
func (o *ResponseRetrieveDatabase) GetData() Database {
	if o == nil {
		var ret Database
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ResponseRetrieveDatabase) GetDataOk() (*Database, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ResponseRetrieveDatabase) SetData(v Database) {
	o.Data = v
}

func (o ResponseRetrieveDatabase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseRetrieveDatabase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ResponseRetrieveDatabase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseRetrieveDatabase := _ResponseRetrieveDatabase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResponseRetrieveDatabase)

	if err != nil {
		return err
	}

	*o = ResponseRetrieveDatabase(varResponseRetrieveDatabase)

	return err
}

type NullableResponseRetrieveDatabase struct {
	value *ResponseRetrieveDatabase
	isSet bool
}

func (v NullableResponseRetrieveDatabase) Get() *ResponseRetrieveDatabase {
	return v.value
}

func (v *NullableResponseRetrieveDatabase) Set(val *ResponseRetrieveDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseRetrieveDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseRetrieveDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseRetrieveDatabase(val *ResponseRetrieveDatabase) *NullableResponseRetrieveDatabase {
	return &NullableResponseRetrieveDatabase{value: val, isSet: true}
}

func (v NullableResponseRetrieveDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseRetrieveDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


