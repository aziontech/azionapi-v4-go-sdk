/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyRequest{}

// PolicyRequest struct for PolicyRequest
type PolicyRequest struct {
	Name string `json:"name" validate:"regexp=.*"`
	Active bool `json:"active"`
	Rules []PolicyRuleRequest `json:"rules"`
}

type _PolicyRequest PolicyRequest

// NewPolicyRequest instantiates a new PolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRequest(name string, active bool, rules []PolicyRuleRequest) *PolicyRequest {
	this := PolicyRequest{}
	this.Name = name
	this.Active = active
	this.Rules = rules
	return &this
}

// NewPolicyRequestWithDefaults instantiates a new PolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRequestWithDefaults() *PolicyRequest {
	this := PolicyRequest{}
	return &this
}

// GetName returns the Name field value
func (o *PolicyRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyRequest) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value
func (o *PolicyRequest) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *PolicyRequest) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *PolicyRequest) SetActive(v bool) {
	o.Active = v
}

// GetRules returns the Rules field value
func (o *PolicyRequest) GetRules() []PolicyRuleRequest {
	if o == nil {
		var ret []PolicyRuleRequest
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *PolicyRequest) GetRulesOk() ([]PolicyRuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *PolicyRequest) SetRules(v []PolicyRuleRequest) {
	o.Rules = v
}

func (o PolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["active"] = o.Active
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *PolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"active",
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyRequest := _PolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyRequest)

	if err != nil {
		return err
	}

	*o = PolicyRequest(varPolicyRequest)

	return err
}

type NullablePolicyRequest struct {
	value *PolicyRequest
	isSet bool
}

func (v NullablePolicyRequest) Get() *PolicyRequest {
	return v.value
}

func (v *NullablePolicyRequest) Set(val *PolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRequest(val *PolicyRequest) *NullablePolicyRequest {
	return &NullablePolicyRequest{value: val, isSet: true}
}

func (v NullablePolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


