/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MFAToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MFAToken{}

// MFAToken Used when user has MFA enabled. Returns a temporary MFA token that must be verified with a TOTP code before receiving full access tokens.
type MFAToken struct {
	// The access_token is a short-lived token (e.g., 10 minutes) used for API authentication in the Authorization: Bearer <access_token> header.
	AccessToken string `json:"access_token"`
	// Specifies the type of two-factor authentication configured. Currently supports 'TOTP' (Time-based One-Time Password).
	TwoFactorRequired bool `json:"two_factor_required"`
	// Indicates whether the user has an active TOTP device configured. If false, the user must register a device before using MFA authentication.
	TwoFactorType string `json:"two_factor_type"`
	// Indicates whether the user already has an active TOTP device configured.If false, the user needs to set up a new device before using MFA authentication.
	HasActiveDevice bool `json:"has_active_device"`
}

type _MFAToken MFAToken

// NewMFAToken instantiates a new MFAToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMFAToken(accessToken string, twoFactorRequired bool, twoFactorType string, hasActiveDevice bool) *MFAToken {
	this := MFAToken{}
	this.AccessToken = accessToken
	this.TwoFactorRequired = twoFactorRequired
	this.TwoFactorType = twoFactorType
	this.HasActiveDevice = hasActiveDevice
	return &this
}

// NewMFATokenWithDefaults instantiates a new MFAToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMFATokenWithDefaults() *MFAToken {
	this := MFAToken{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *MFAToken) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *MFAToken) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *MFAToken) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetTwoFactorRequired returns the TwoFactorRequired field value
func (o *MFAToken) GetTwoFactorRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TwoFactorRequired
}

// GetTwoFactorRequiredOk returns a tuple with the TwoFactorRequired field value
// and a boolean to check if the value has been set.
func (o *MFAToken) GetTwoFactorRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TwoFactorRequired, true
}

// SetTwoFactorRequired sets field value
func (o *MFAToken) SetTwoFactorRequired(v bool) {
	o.TwoFactorRequired = v
}

// GetTwoFactorType returns the TwoFactorType field value
func (o *MFAToken) GetTwoFactorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TwoFactorType
}

// GetTwoFactorTypeOk returns a tuple with the TwoFactorType field value
// and a boolean to check if the value has been set.
func (o *MFAToken) GetTwoFactorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TwoFactorType, true
}

// SetTwoFactorType sets field value
func (o *MFAToken) SetTwoFactorType(v string) {
	o.TwoFactorType = v
}

// GetHasActiveDevice returns the HasActiveDevice field value
func (o *MFAToken) GetHasActiveDevice() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasActiveDevice
}

// GetHasActiveDeviceOk returns a tuple with the HasActiveDevice field value
// and a boolean to check if the value has been set.
func (o *MFAToken) GetHasActiveDeviceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasActiveDevice, true
}

// SetHasActiveDevice sets field value
func (o *MFAToken) SetHasActiveDevice(v bool) {
	o.HasActiveDevice = v
}

func (o MFAToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MFAToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["two_factor_required"] = o.TwoFactorRequired
	toSerialize["two_factor_type"] = o.TwoFactorType
	toSerialize["has_active_device"] = o.HasActiveDevice
	return toSerialize, nil
}

func (o *MFAToken) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"two_factor_required",
		"two_factor_type",
		"has_active_device",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMFAToken := _MFAToken{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMFAToken)

	if err != nil {
		return err
	}

	*o = MFAToken(varMFAToken)

	return err
}

type NullableMFAToken struct {
	value *MFAToken
	isSet bool
}

func (v NullableMFAToken) Get() *MFAToken {
	return v.value
}

func (v *NullableMFAToken) Set(val *MFAToken) {
	v.value = val
	v.isSet = true
}

func (v NullableMFAToken) IsSet() bool {
	return v.isSet
}

func (v *NullableMFAToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFAToken(val *MFAToken) *NullableMFAToken {
	return &NullableMFAToken{value: val, isSet: true}
}

func (v NullableMFAToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFAToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


