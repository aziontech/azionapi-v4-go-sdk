/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TOTPDeviceList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TOTPDeviceList{}

// TOTPDeviceList struct for TOTPDeviceList
type TOTPDeviceList struct {
	Id int64 `json:"id"`
	// The human-readable name of this device.
	Name string `json:"name"`
	// Is this device ready for use?
	Confirmed *bool `json:"confirmed,omitempty"`
	// The user that this device belongs to.
	UserId int64 `json:"user_id"`
}

type _TOTPDeviceList TOTPDeviceList

// NewTOTPDeviceList instantiates a new TOTPDeviceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTOTPDeviceList(id int64, name string, userId int64) *TOTPDeviceList {
	this := TOTPDeviceList{}
	this.Id = id
	this.Name = name
	this.UserId = userId
	return &this
}

// NewTOTPDeviceListWithDefaults instantiates a new TOTPDeviceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTOTPDeviceListWithDefaults() *TOTPDeviceList {
	this := TOTPDeviceList{}
	return &this
}

// GetId returns the Id field value
func (o *TOTPDeviceList) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TOTPDeviceList) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TOTPDeviceList) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TOTPDeviceList) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TOTPDeviceList) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TOTPDeviceList) SetName(v string) {
	o.Name = v
}

// GetConfirmed returns the Confirmed field value if set, zero value otherwise.
func (o *TOTPDeviceList) GetConfirmed() bool {
	if o == nil || IsNil(o.Confirmed) {
		var ret bool
		return ret
	}
	return *o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TOTPDeviceList) GetConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.Confirmed) {
		return nil, false
	}
	return o.Confirmed, true
}

// HasConfirmed returns a boolean if a field has been set.
func (o *TOTPDeviceList) HasConfirmed() bool {
	if o != nil && !IsNil(o.Confirmed) {
		return true
	}

	return false
}

// SetConfirmed gets a reference to the given bool and assigns it to the Confirmed field.
func (o *TOTPDeviceList) SetConfirmed(v bool) {
	o.Confirmed = &v
}

// GetUserId returns the UserId field value
func (o *TOTPDeviceList) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *TOTPDeviceList) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *TOTPDeviceList) SetUserId(v int64) {
	o.UserId = v
}

func (o TOTPDeviceList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TOTPDeviceList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Confirmed) {
		toSerialize["confirmed"] = o.Confirmed
	}
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *TOTPDeviceList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTOTPDeviceList := _TOTPDeviceList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTOTPDeviceList)

	if err != nil {
		return err
	}

	*o = TOTPDeviceList(varTOTPDeviceList)

	return err
}

type NullableTOTPDeviceList struct {
	value *TOTPDeviceList
	isSet bool
}

func (v NullableTOTPDeviceList) Get() *TOTPDeviceList {
	return v.value
}

func (v *NullableTOTPDeviceList) Set(val *TOTPDeviceList) {
	v.value = val
	v.isSet = true
}

func (v NullableTOTPDeviceList) IsSet() bool {
	return v.isSet
}

func (v *NullableTOTPDeviceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTOTPDeviceList(val *TOTPDeviceList) *NullableTOTPDeviceList {
	return &NullableTOTPDeviceList{value: val, isSet: true}
}

func (v NullableTOTPDeviceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTOTPDeviceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


