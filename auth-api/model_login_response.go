/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth-api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// LoginResponse - struct for LoginResponse
type LoginResponse struct {
	MFAToken *MFAToken
	TokenPair *TokenPair
}

// MFATokenAsLoginResponse is a convenience function that returns MFAToken wrapped in LoginResponse
func MFATokenAsLoginResponse(v *MFAToken) LoginResponse {
	return LoginResponse{
		MFAToken: v,
	}
}

// TokenPairAsLoginResponse is a convenience function that returns TokenPair wrapped in LoginResponse
func TokenPairAsLoginResponse(v *TokenPair) LoginResponse {
	return LoginResponse{
		TokenPair: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LoginResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MFAToken
	err = newStrictDecoder(data).Decode(&dst.MFAToken)
	if err == nil {
		jsonMFAToken, _ := json.Marshal(dst.MFAToken)
		if string(jsonMFAToken) == "{}" { // empty struct
			dst.MFAToken = nil
		} else {
			if err = validator.Validate(dst.MFAToken); err != nil {
				dst.MFAToken = nil
			} else {
				match++
			}
		}
	} else {
		dst.MFAToken = nil
	}

	// try to unmarshal data into TokenPair
	err = newStrictDecoder(data).Decode(&dst.TokenPair)
	if err == nil {
		jsonTokenPair, _ := json.Marshal(dst.TokenPair)
		if string(jsonTokenPair) == "{}" { // empty struct
			dst.TokenPair = nil
		} else {
			if err = validator.Validate(dst.TokenPair); err != nil {
				dst.TokenPair = nil
			} else {
				match++
			}
		}
	} else {
		dst.TokenPair = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MFAToken = nil
		dst.TokenPair = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LoginResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LoginResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LoginResponse) MarshalJSON() ([]byte, error) {
	if src.MFAToken != nil {
		return json.Marshal(&src.MFAToken)
	}

	if src.TokenPair != nil {
		return json.Marshal(&src.TokenPair)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LoginResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MFAToken != nil {
		return obj.MFAToken
	}

	if obj.TokenPair != nil {
		return obj.TokenPair
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LoginResponse) GetActualInstanceValue() (interface{}) {
	if obj.MFAToken != nil {
		return *obj.MFAToken
	}

	if obj.TokenPair != nil {
		return *obj.TokenPair
	}

	// all schemas are nil
	return nil
}

type NullableLoginResponse struct {
	value *LoginResponse
	isSet bool
}

func (v NullableLoginResponse) Get() *LoginResponse {
	return v.value
}

func (v *NullableLoginResponse) Set(val *LoginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResponse(val *LoginResponse) *NullableLoginResponse {
	return &NullableLoginResponse{value: val, isSet: true}
}

func (v NullableLoginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


