/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auth-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenPair{}

// TokenPair Used when user does not have MFA enabled or after successful MFA verification. Returns both access and refresh tokens for API authentication.
type TokenPair struct {
	// The access_token is a short-lived token (e.g., 10 minutes) used for API authentication in the Authorization: Bearer <access_token> header.
	AccessToken string `json:"access_token"`
	// A long-lived JWT token used to refresh the access_token without requiring the user to authenticate again.
	RefreshToken string `json:"refresh_token"`
}

type _TokenPair TokenPair

// NewTokenPair instantiates a new TokenPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenPair(accessToken string, refreshToken string) *TokenPair {
	this := TokenPair{}
	this.AccessToken = accessToken
	this.RefreshToken = refreshToken
	return &this
}

// NewTokenPairWithDefaults instantiates a new TokenPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenPairWithDefaults() *TokenPair {
	this := TokenPair{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *TokenPair) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *TokenPair) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *TokenPair) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *TokenPair) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *TokenPair) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *TokenPair) SetRefreshToken(v string) {
	o.RefreshToken = v
}

func (o TokenPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["refresh_token"] = o.RefreshToken
	return toSerialize, nil
}

func (o *TokenPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"refresh_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenPair := _TokenPair{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenPair)

	if err != nil {
		return err
	}

	*o = TokenPair(varTokenPair)

	return err
}

type NullableTokenPair struct {
	value *TokenPair
	isSet bool
}

func (v NullableTokenPair) Get() *TokenPair {
	return v.value
}

func (v *NullableTokenPair) Set(val *TokenPair) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenPair) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenPair(val *TokenPair) *NullableTokenPair {
	return &NullableTokenPair{value: val, isSet: true}
}

func (v NullableTokenPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


