/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authapi

import (
	"encoding/json"
)

// checks if the PatchedPolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedPolicyRequest{}

// PatchedPolicyRequest struct for PatchedPolicyRequest
type PatchedPolicyRequest struct {
	Name *string `json:"name,omitempty"`
	Active *bool `json:"active,omitempty"`
	Rules []PolicyRuleRequest `json:"rules,omitempty"`
}

// NewPatchedPolicyRequest instantiates a new PatchedPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedPolicyRequest() *PatchedPolicyRequest {
	this := PatchedPolicyRequest{}
	return &this
}

// NewPatchedPolicyRequestWithDefaults instantiates a new PatchedPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedPolicyRequestWithDefaults() *PatchedPolicyRequest {
	this := PatchedPolicyRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedPolicyRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedPolicyRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedPolicyRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedPolicyRequest) SetName(v string) {
	o.Name = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PatchedPolicyRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedPolicyRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PatchedPolicyRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PatchedPolicyRequest) SetActive(v bool) {
	o.Active = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *PatchedPolicyRequest) GetRules() []PolicyRuleRequest {
	if o == nil || IsNil(o.Rules) {
		var ret []PolicyRuleRequest
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedPolicyRequest) GetRulesOk() ([]PolicyRuleRequest, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *PatchedPolicyRequest) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []PolicyRuleRequest and assigns it to the Rules field.
func (o *PatchedPolicyRequest) SetRules(v []PolicyRuleRequest) {
	o.Rules = v
}

func (o PatchedPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullablePatchedPolicyRequest struct {
	value *PatchedPolicyRequest
	isSet bool
}

func (v NullablePatchedPolicyRequest) Get() *PatchedPolicyRequest {
	return v.value
}

func (v *NullablePatchedPolicyRequest) Set(val *PatchedPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedPolicyRequest(val *PatchedPolicyRequest) *NullablePatchedPolicyRequest {
	return &NullablePatchedPolicyRequest{value: val, isSet: true}
}

func (v NullablePatchedPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


