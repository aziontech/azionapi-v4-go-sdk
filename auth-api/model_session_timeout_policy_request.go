/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SessionTimeoutPolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionTimeoutPolicyRequest{}

// SessionTimeoutPolicyRequest struct for SessionTimeoutPolicyRequest
type SessionTimeoutPolicyRequest struct {
	MaxIdleTime int64 `json:"max_idle_time"`
	MaxSessionTime int64 `json:"max_session_time"`
}

type _SessionTimeoutPolicyRequest SessionTimeoutPolicyRequest

// NewSessionTimeoutPolicyRequest instantiates a new SessionTimeoutPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionTimeoutPolicyRequest(maxIdleTime int64, maxSessionTime int64) *SessionTimeoutPolicyRequest {
	this := SessionTimeoutPolicyRequest{}
	this.MaxIdleTime = maxIdleTime
	this.MaxSessionTime = maxSessionTime
	return &this
}

// NewSessionTimeoutPolicyRequestWithDefaults instantiates a new SessionTimeoutPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionTimeoutPolicyRequestWithDefaults() *SessionTimeoutPolicyRequest {
	this := SessionTimeoutPolicyRequest{}
	return &this
}

// GetMaxIdleTime returns the MaxIdleTime field value
func (o *SessionTimeoutPolicyRequest) GetMaxIdleTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxIdleTime
}

// GetMaxIdleTimeOk returns a tuple with the MaxIdleTime field value
// and a boolean to check if the value has been set.
func (o *SessionTimeoutPolicyRequest) GetMaxIdleTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxIdleTime, true
}

// SetMaxIdleTime sets field value
func (o *SessionTimeoutPolicyRequest) SetMaxIdleTime(v int64) {
	o.MaxIdleTime = v
}

// GetMaxSessionTime returns the MaxSessionTime field value
func (o *SessionTimeoutPolicyRequest) GetMaxSessionTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxSessionTime
}

// GetMaxSessionTimeOk returns a tuple with the MaxSessionTime field value
// and a boolean to check if the value has been set.
func (o *SessionTimeoutPolicyRequest) GetMaxSessionTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSessionTime, true
}

// SetMaxSessionTime sets field value
func (o *SessionTimeoutPolicyRequest) SetMaxSessionTime(v int64) {
	o.MaxSessionTime = v
}

func (o SessionTimeoutPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionTimeoutPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["max_idle_time"] = o.MaxIdleTime
	toSerialize["max_session_time"] = o.MaxSessionTime
	return toSerialize, nil
}

func (o *SessionTimeoutPolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_idle_time",
		"max_session_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionTimeoutPolicyRequest := _SessionTimeoutPolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionTimeoutPolicyRequest)

	if err != nil {
		return err
	}

	*o = SessionTimeoutPolicyRequest(varSessionTimeoutPolicyRequest)

	return err
}

type NullableSessionTimeoutPolicyRequest struct {
	value *SessionTimeoutPolicyRequest
	isSet bool
}

func (v NullableSessionTimeoutPolicyRequest) Get() *SessionTimeoutPolicyRequest {
	return v.value
}

func (v *NullableSessionTimeoutPolicyRequest) Set(val *SessionTimeoutPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionTimeoutPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionTimeoutPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionTimeoutPolicyRequest(val *SessionTimeoutPolicyRequest) *NullableSessionTimeoutPolicyRequest {
	return &NullableSessionTimeoutPolicyRequest{value: val, isSet: true}
}

func (v NullableSessionTimeoutPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionTimeoutPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


