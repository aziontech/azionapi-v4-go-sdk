/*
Auth API

REST API OpenAPI documentation for the Auth API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LockoutPolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LockoutPolicyRequest{}

// LockoutPolicyRequest struct for LockoutPolicyRequest
type LockoutPolicyRequest struct {
	Active bool `json:"active"`
	MaxAttempts int64 `json:"max_attempts"`
	// Blocking period in minutes
	BlockingPeriod int64 `json:"blocking_period"`
}

type _LockoutPolicyRequest LockoutPolicyRequest

// NewLockoutPolicyRequest instantiates a new LockoutPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockoutPolicyRequest(active bool, maxAttempts int64, blockingPeriod int64) *LockoutPolicyRequest {
	this := LockoutPolicyRequest{}
	this.Active = active
	this.MaxAttempts = maxAttempts
	this.BlockingPeriod = blockingPeriod
	return &this
}

// NewLockoutPolicyRequestWithDefaults instantiates a new LockoutPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockoutPolicyRequestWithDefaults() *LockoutPolicyRequest {
	this := LockoutPolicyRequest{}
	return &this
}

// GetActive returns the Active field value
func (o *LockoutPolicyRequest) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *LockoutPolicyRequest) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *LockoutPolicyRequest) SetActive(v bool) {
	o.Active = v
}

// GetMaxAttempts returns the MaxAttempts field value
func (o *LockoutPolicyRequest) GetMaxAttempts() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value
// and a boolean to check if the value has been set.
func (o *LockoutPolicyRequest) GetMaxAttemptsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAttempts, true
}

// SetMaxAttempts sets field value
func (o *LockoutPolicyRequest) SetMaxAttempts(v int64) {
	o.MaxAttempts = v
}

// GetBlockingPeriod returns the BlockingPeriod field value
func (o *LockoutPolicyRequest) GetBlockingPeriod() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BlockingPeriod
}

// GetBlockingPeriodOk returns a tuple with the BlockingPeriod field value
// and a boolean to check if the value has been set.
func (o *LockoutPolicyRequest) GetBlockingPeriodOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockingPeriod, true
}

// SetBlockingPeriod sets field value
func (o *LockoutPolicyRequest) SetBlockingPeriod(v int64) {
	o.BlockingPeriod = v
}

func (o LockoutPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LockoutPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["max_attempts"] = o.MaxAttempts
	toSerialize["blocking_period"] = o.BlockingPeriod
	return toSerialize, nil
}

func (o *LockoutPolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"max_attempts",
		"blocking_period",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLockoutPolicyRequest := _LockoutPolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLockoutPolicyRequest)

	if err != nil {
		return err
	}

	*o = LockoutPolicyRequest(varLockoutPolicyRequest)

	return err
}

type NullableLockoutPolicyRequest struct {
	value *LockoutPolicyRequest
	isSet bool
}

func (v NullableLockoutPolicyRequest) Get() *LockoutPolicyRequest {
	return v.value
}

func (v *NullableLockoutPolicyRequest) Set(val *LockoutPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLockoutPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLockoutPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockoutPolicyRequest(val *LockoutPolicyRequest) *NullableLockoutPolicyRequest {
	return &NullableLockoutPolicyRequest{value: val, isSet: true}
}

func (v NullableLockoutPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockoutPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


